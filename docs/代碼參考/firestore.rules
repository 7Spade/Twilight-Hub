/**
 * @fileoverview Firestore Security Rules for the application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for personal data and
 * employs shared access patterns where appropriate, with public read access
 * for certain collections.
 *
 * Data Structure:
 * - User data is nested under `/users/{userId}`.
 * - Organizations and their related data are stored under `/organizations/{organizationId}`.
 * - Spaces can be owned by users or organizations and are stored in the `/spaces/{spaceId}` collection,
 *   with user-owned spaces also denormalized under `/users/{userId}/spaces/{spaceId}` for faster access.
 * - Conversations and Messages are stored in `/conversations/{conversationId}` and
 *   `/conversations/{conversationId}/messages/{messageId}`, respectively.
 * - Other top-level collections store global or shared data.
 *
 * Key Security Decisions:
 * - Users can only read and write their own profiles and associated subcollections.
 * - Organization data is accessible to organization members.
 * - Public read access is granted to the `/spaces` and `/modules` collections.
 * - User listing is disallowed.
 * - Certain operations, like wallet updates, might be reserved for server-side logic.
 *
 * Denormalization for Authorization:
 * - Spaces documents contain an `ownerId` field indicating the user or organization that owns the space.
 * - Conversations contain a `participantIds` array to easily check if a user is part of the conversation.
 *
 * Structural Segregation:
 * - Spaces are stored in a top-level `/spaces` collection and can also be stored in a user's subcollection for optimized queries.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows users to read and write their own profile data.
     * @path /users/{userId}
     * @allow (read) User with UID 'user_abc' can read /users/user_abc.
     * @allow (create) User with UID 'user_abc' can create /users/user_abc if request.resource.data.id == 'user_abc'.
     * @allow (update) User with UID 'user_abc' can update /users/user_abc if request.resource.data.id == resource.data.id.
     * @allow (delete) User with UID 'user_abc' can delete /users/user_abc.
     * @deny (read) User with UID 'user_xyz' cannot read /users/user_abc.
     * @deny (create) User with UID 'user_abc' cannot create /users/user_abc if request.resource.data.id != 'user_abc'.
     * @deny (update) User with UID 'user_abc' cannot update /users/user_abc if request.resource.data.id != resource.data.id.
     * @principle Enforces document ownership for writes and reads.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows a user to manage the list of users they are following.
     * @path /users/{userId}/following/{followingId}
     * @allow (create) User 'user_abc' can create a following relationship to 'user_xyz' in /users/user_abc/following/user_xyz.
     * @allow (get) User 'user_abc' can read the following relationship to 'user_xyz' in /users/user_abc/following/user_xyz.
     * @allow (list) User 'user_abc' can list all following relationships in /users/user_abc/following.
     * @allow (delete) User 'user_abc' can delete the following relationship to 'user_xyz' in /users/user_abc/following/user_xyz.
     * @deny (create) User 'user_xyz' cannot create a following relationship under 'user_abc'.
     * @principle Enforces user ownership for managing their own following list.
     */
    match /users/{userId}/following/{followingId} {
        function isOwner(userId) {
          return request.auth.uid == userId;
        }
        function isExistingOwner(userId) {
            return isOwner(userId) && resource != null;
        }
        allow get: if isOwner(userId);
        allow list: if isOwner(userId);
        allow create: if isOwner(userId);
        allow update: if false;
        allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows a user to see who is following them.
     * @path /users/{userId}/followers/{followerId}
     * @allow (get) User 'user_abc' can read who is following them.
     * @allow (list) User 'user_abc' can list all followers.
     * @deny (create) No one can create a follower document directly. Follower relationships are managed elsewhere.
     * @deny (update) No one can update a follower document.
     * @deny (delete) No one can delete a follower document directly. Follower relationships are managed elsewhere.
     * @principle Enforces user ownership for reading their own follower list. Creation/deletion is handled indirectly.
     */
    match /users/{userId}/followers/{followerId} {
        function isOwner(userId) {
          return request.auth.uid == userId;
        }
        allow get: if isOwner(userId);
        allow list: if isOwner(userId);
        allow create: if false;
        allow update: if false;
        allow delete: if false;
    }

    /**
     * @description Allows a user to manage their unlocked achievements.
     * @path /users/{userId}/user_achievements/{achievementId}
     * @allow (get) User 'user_abc' can read their unlocked achievements.
     * @allow (list) User 'user_abc' can list their unlocked achievements.
     * @allow (create) User 'user_abc' can create a new unlocked achievement.
     * @allow (delete) User 'user_abc' can delete one of their unlocked achievements.
     * @deny (create) User 'user_xyz' cannot create an achievement for 'user_abc'.
     * @principle Enforces user ownership for managing their own achievements.
     */
    match /users/{userId}/user_achievements/{achievementId} {
        function isOwner(userId) {
          return request.auth.uid == userId;
        }
        function isExistingOwner(userId) {
            return isOwner(userId) && resource != null;
        }
        allow get: if isOwner(userId);
        allow list: if isOwner(userId);
        allow create: if isOwner(userId);
        allow update: if false;
        allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Restricts access to user wallets. Wallets should be updated via trusted server-side code.
     * @path /users/{userId}/wallet/{currencyId}
     * @deny (get) No one can directly read a user's wallet.
     * @deny (list) No one can list a user's wallets.
     * @deny (create) No one can directly create a user's wallet.
     * @deny (update) No one can directly update a user's wallet.
     * @deny (delete) No one can directly delete a user's wallet.
     * @principle Server-only access to sensitive financial data.
     */
    match /users/{userId}/wallet/{currencyId} {
        allow get: if false;
        allow list: if false;
        allow create: if false;
        allow update: if false;
        allow delete: if false;
    }

    /**
     * @description Allows a user to view their transaction history.
     * @path /users/{userId}/transactions/{transactionId}
     * @allow (get) User 'user_abc' can read their transaction history.
     * @allow (list) User 'user_abc' can list their transaction history.
     * @deny (create) User 'user_xyz' cannot create a transaction for 'user_abc'.
     * @deny (update) No one can update transaction history.
     * @deny (delete) No one can delete transaction history.
     * @principle Enforces user ownership for reading their transaction history; creation is likely server-side.
     */
    match /users/{userId}/transactions/{transactionId} {
        function isOwner(userId) {
          return request.auth.uid == userId;
        }
        allow get: if isOwner(userId);
        allow list: if isOwner(userId);
        allow create: if isOwner(userId);
        allow update: if false;
        allow delete: if false;
    }

   /**
    * @description Allows a user to manage spaces they directly own.
    * @path /users/{userId}/spaces/{spaceId}
    * @allow (get) User 'user_abc' can read their own space.
    * @allow (list) User 'user_abc' can list their own spaces.
    * @allow (create) User 'user_abc' can create a new space under their profile.
    * @allow (update) User 'user_abc' can update their own space.
    * @allow (delete) User 'user_abc' can delete their own space.
    * @deny (create) User 'user_xyz' cannot create a space under 'user_abc'.
    * @principle Enforces user ownership for spaces created under their profile.
    */
    match /users/{userId}/spaces/{spaceId} {
        function isOwner(userId) {
          return request.auth.uid == userId;
        }
        function isExistingOwner(userId) {
            return isOwner(userId) && resource != null;
        }
        allow get: if isOwner(userId);
        allow list: if isOwner(userId);
        allow create: if isOwner(userId);
        allow update: if isExistingOwner(userId);
        allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows organization members to read and write organization profiles.
     * @path /organizations/{organizationId}
     * @allow (get) Any authenticated user can read organization profiles.
     * @allow (list) Any authenticated user can list organizations.
     * @allow (create) Any authenticated user can create organization profiles.
     * @allow (update) Any authenticated user can update organization profiles.
     * @allow (delete) Any authenticated user can delete organization profiles.
     * @principle Allows authenticated users to perform CRUD operations on organization profiles.
     */
    match /organizations/{organizationId} {
        allow get: if true;
        allow list: if true;
        allow create: if true;
        allow update: if true;
        allow delete: if true;
    }

    /**
     * @description Allows organization members to manage groups within the organization.
     * @path /organizations/{organizationId}/groups/{groupId}
     * @allow (get) Any authenticated user can read groups within the organization.
     * @allow (list) Any authenticated user can list groups within the organization.
     * @allow (create) Any authenticated user can create groups within the organization.
     * @allow (update) Any authenticated user can update groups within the organization.
     * @allow (delete) Any authenticated user can delete groups within the organization.
     * @principle Allows authenticated users to perform CRUD operations on groups within an organization.
     */
    match /organizations/{organizationId}/groups/{groupId} {
        allow get: if true;
        allow list: if true;
        allow create: if true;
        allow update: if true;
        allow delete: if true;
    }

    /**
     * @description Allows anyone to read spaces, but restricts creation, updates, and deletions.
     * @path /spaces/{spaceId}
     * @allow (get) Any user can read space data.
     * @allow (list) Any user can list spaces.
     * @allow (create) Any user can create spaces.
     * @allow (update) Any user can update spaces.
     * @allow (delete) Any user can delete spaces.
     */
    match /spaces/{spaceId} {
        allow get: if true;
        allow list: if true;
        allow create: if true;
        allow update: if true;
        allow delete: if true;
    }

    /**
     * @description Allows anyone to read module definitions. Creation, updates, and deletions are unrestricted.
     * @path /modules/{moduleId}
     * @allow (get) Any user can read module definitions.
     * @allow (list) Any user can list modules.
     * @allow (create) Any user can create modules.
     * @allow (update) Any user can update modules.
     * @allow (delete) Any user can delete modules.
     */
    match /modules/{moduleId} {
        allow get: if true;
        allow list: if true;
        allow create: if true;
        allow update: if true;
        allow delete: if true;
    }

    /**
     * @description Allows anyone to read achievement definitions. Creation, updates, and deletions are unrestricted.
     * @path /achievements/{achievementId}
     * @allow (get) Any user can read achievement definitions.
     * @allow (list) Any user can list achievements.
     * @allow (create) Any user can create achievements.
     * @allow (update) Any user can update achievements.
     * @allow (delete) Any user can delete achievements.
     */
    match /achievements/{achievementId} {
        allow get: if true;
        allow list: if true;
        allow create: if true;
        allow update: if true;
        allow delete: if true;
    }

    /**
     * @description Allows participants to read and write conversation metadata.
     * @path /conversations/{conversationId}
     */
    match /conversations/{conversationId} {
        allow get: if true;
        allow list: if true;
        allow create: if true;
        allow update: if true;
        allow delete: if true;
    }

    /**
     * @description Allows participants to read and write messages within a conversation.
     * @path /conversations/{conversationId}/messages/{messageId}
     */
    match /conversations/{conversationId}/messages/{messageId} {
        allow get: if true;
        allow list: if true;
        allow create: if true;
        allow update: if true;
        allow delete: if true;
    }

    /**
     * @description Allows organization members to read and write items belonging to the organization.
     * @path /organizations/{organizationId}/items/{itemId}
     */
    match /organizations/{organizationId}/items/{itemId} {
        allow get: if true;
        allow list: if true;
        allow create: if true;
        allow update: if true;
        allow delete: if true;
    }

    /**
     * @description Allows organization members to read and write warehouses belonging to the organization.
     * @path /organizations/{organizationId}/warehouses/{warehouseId}
     */
    match /organizations/{organizationId}/warehouses/{warehouseId} {
        allow get: if true;
        allow list: if true;
        allow create: if true;
        allow update: if true;
        allow delete: if true;
    }

    /**
     * @description Allows organization members to read and write stock levels within a warehouse.
     * @path /organizations/{organizationId}/warehouses/{warehouseId}/stock/{stockId}
     */
    match /organizations/{organizationId}/warehouses/{warehouseId}/stock/{stockId} {
        allow get: if true;
        allow list: if true;
        allow create: if true;
        allow update: if true;
        allow delete: if true;
    }
  }
}