{
  "summary": {
    "total": 81,
    "byPriority": {
      "P2": 69,
      "P1": 10,
      "P3": 2
    },
    "byType": {
      "PERF": 4,
      "REFACTOR": 44,
      "FEAT": 14,
      "CLEANUP": 2,
      "TYPING": 1,
      "HOOK": 2,
      "FIX": 14
    },
    "urgent": 12
  },
  "todos": [
    {
      "priority": "P1",
      "type": "REFACTOR",
      "description": "src/components/features/spaces/components/ - 減少過度抽象的組件層級",
      "details": [
        "問題：70 個文件過度拆分，造成不必要的複雜性",
        "影響：導入路徑過長、維護成本高、認知負擔重",
        "建議：",
        "1) 合併功能相似的組件（如多個 list 組件）",
        "2) 簡化目錄結構，減少嵌套層級",
        "3) 移除不必要的 barrel exports",
        "4) 遵循 Next.js 15 組件組合模式"
      ],
      "file": "src\\components\\features\\spaces\\components\\index.ts",
      "line": 7,
      "assignee": "frontend",
      "deadline": "2025-01-20",
      "context": " * by providing a single, consistent path.\r\n */\r\n\r\n// TODO: [P1] REFACTOR src/components/features/spaces/components/ - 減少過度抽象的組件層級\r\n// 問題：70 個文件過度拆分，造成不必要的複雜性\r\n// 影響：導入路徑過長、維護成本高、認知負擔重\r\n// 建議：\r\n// 1) 合併功能相似的組件（如多個 list 組件）\r\n// 2) 簡化目錄結構，減少嵌套層級\r\n// 3) 移除不必要的 barrel exports\r\n// 4) 遵循 Next.js 15 組件組合模式\r\n// @assignee frontend-team\r\n// @deadline 2025-01-20\r"
    },
    {
      "priority": "P1",
      "type": "REFACTOR",
      "description": "src/app/(app)/layout.tsx - 降低客戶端邊界與狀態複雜度",
      "details": [
        "導向：",
        "1) 盡量保持本檔為瘦客戶端殼層，將資料抓取/權限/聚合移至 Server Components 或 Server Actions。",
        "2) 將重型 UI（Sidebar/Nav 計算）與資料相依分離，採 props 注入；避免在 layout 內多重 useEffect/useMemo 疊加。",
        "3) 使用 App Router 推薦：父層 Server Layout + 子層 Client Providers（參考 Next.js docs: server and client components, use client in provider）。"
      ],
      "file": "src\\app\\(app)\\layout.tsx",
      "line": 2,
      "assignee": "ai",
      "context": "'use client';\n// TODO: [P1] REFACTOR src/app/(app)/layout.tsx - 降低客戶端邊界與狀態複雜度\n// 導向：\n// 1) 盡量保持本檔為瘦客戶端殼層，將資料抓取/權限/聚合移至 Server Components 或 Server Actions。\n// 2) 將重型 UI（Sidebar/Nav 計算）與資料相依分離，採 props 注入；避免在 layout 內多重 useEffect/useMemo 疊加。\n// 3) 使用 App Router 推薦：父層 Server Layout + 子層 Client Providers（參考 Next.js docs: server and client components, use client in provider）。\n// @assignee ai\n\nimport {\n  FirebaseClientProvider,\n  useUser,"
    },
    {
      "priority": "P1",
      "type": "PERF",
      "description": "Hooks deps (L122, L157, L183) [低認知][現代化]",
      "details": [
        "- 問題：'warehouses' 的邏輯表達式導致 useEffect/useMemo 依賴可能每次變更",
        "- 指引：以 useMemo 包裝初始化或將計算移入對應 useMemo/Effect 回呼中。"
      ],
      "file": "src\\app\\(app)\\organizations\\[organizationslug]\\inventory\\page.tsx",
      "line": 2,
      "context": "'use client';\n// TODO: [P1] PERF Hooks deps (L122, L157, L183) [低認知][現代化]\n// - 問題：'warehouses' 的邏輯表達式導致 useEffect/useMemo 依賴可能每次變更\n// - 指引：以 useMemo 包裝初始化或將計算移入對應 useMemo/Effect 回呼中。\n\nimport React, { useMemo, useState, useEffect } from 'react';\nimport Link from 'next/link';\nimport { useFirestore, useCollection } from '@/firebase';\nimport { collection, query, where, getDocs } from 'firebase/firestore';\nimport {\n  Breadcrumb,"
    },
    {
      "priority": "P1",
      "type": "PERF",
      "description": "Hooks deps (L95, L135) [低認知][現代化]",
      "details": [
        "- 問題：'warehouses' 的邏輯表達式可能使 useEffect 依賴每次改變",
        "- 指引：用 useMemo 固定引用或把初始化移入 effect 回呼。"
      ],
      "file": "src\\app\\(app)\\organizations\\[organizationslug]\\inventory\\[itemId]\\page.tsx",
      "line": 2,
      "context": "'use client';\n// TODO: [P1] PERF Hooks deps (L95, L135) [低認知][現代化]\n// - 問題：'warehouses' 的邏輯表達式可能使 useEffect 依賴每次改變\n// - 指引：用 useMemo 固定引用或把初始化移入 effect 回呼。\n\nimport React, { useMemo, useState, useEffect } from 'react';\nimport Link from 'next/link';\nimport { useFirestore, useDoc, useCollection } from '@/firebase';\nimport {\n  collection,\n  doc,"
    },
    {
      "priority": "P1",
      "type": "PERF",
      "description": "Hooks deps (L42, L56, L77, L84, L89) [低認知]",
      "details": [
        "- 問題：'allSpaces' 邏輯表達式導致 useMemo 依賴變動",
        "- 指引：以 useMemo 包裝初始化或移入對應 useMemo 回呼。"
      ],
      "file": "src\\app\\(app)\\spaces\\page.tsx",
      "line": 2,
      "context": "'use client';\r\n// TODO: [P1] PERF Hooks deps (L42, L56, L77, L84, L89) [低認知]\r\n// - 問題：'allSpaces' 邏輯表達式導致 useMemo 依賴變動\r\n// - 指引：以 useMemo 包裝初始化或移入對應 useMemo 回呼。\r\n\r\nimport { useMemo } from 'react';\r\nimport { collection, query, where, documentId } from 'firebase/firestore';\r\nimport { useUser, useFirestore, useCollection } from '@/firebase';\r\nimport { Button } from '@/components/ui/button';\r\nimport { PlusCircle } from 'lucide-react';\r\nimport { useDialogState } from '@/hooks/use-app-state';\r"
    },
    {
      "priority": "P1",
      "type": "TYPING",
      "description": "no-any (L192, L221) [低認知]",
      "details": [
        "TODO: [P1] HOOK deps (L365) [低認知]",
        "TODO: [P1] REFACTOR src/components/auth/auth-provider.tsx - 縮減責任邊界與資料下傳",
        "原則（Next.js App Router / Firebase）：",
        "- Firestore 聚合轉服務層；Provider 僅保留 userId/effectivePermissions 等最小必要。",
        "- 禁止在 render 期間做 I/O；mutation 走 Server Actions 或明確事件觸發。",
        "- 將 `PermissionGuard` 抽至更小 API（例如 useHasPermission(selector)）以便編譯期 tree-shaking。"
      ],
      "file": "src\\components\\auth\\auth-provider.tsx",
      "line": 9,
      "assignee": "ai",
      "context": "\n'use client';\n// TODO: [P2] CLEANUP unused import (L39) [低認知]\n// TODO: [P1] TYPING no-any (L192, L221) [低認知]\n// TODO: [P1] HOOK deps (L365) [低認知]\n// TODO: [P1] REFACTOR src/components/auth/auth-provider.tsx - 縮減責任邊界與資料下傳\n// 原則（Next.js App Router / Firebase）：\n// - Firestore 聚合轉服務層；Provider 僅保留 userId/effectivePermissions 等最小必要。\n// - 禁止在 render 期間做 I/O；mutation 走 Server Actions 或明確事件觸發。\n// - 將 `PermissionGuard` 抽至更小 API（例如 useHasPermission(selector)）以便編譯期 tree-shaking。\n// @assignee ai\n\n// TODO: [P2] REFACTOR src/components/auth/auth-provider.tsx - 奧卡姆剃刀精簡權限/認證 Provider"
    },
    {
      "priority": "P1",
      "type": "HOOK",
      "description": "deps (L365) [低認知]",
      "details": [
        "TODO: [P1] REFACTOR src/components/auth/auth-provider.tsx - 縮減責任邊界與資料下傳",
        "原則（Next.js App Router / Firebase）：",
        "- Firestore 聚合轉服務層；Provider 僅保留 userId/effectivePermissions 等最小必要。",
        "- 禁止在 render 期間做 I/O；mutation 走 Server Actions 或明確事件觸發。",
        "- 將 `PermissionGuard` 抽至更小 API（例如 useHasPermission(selector)）以便編譯期 tree-shaking。"
      ],
      "file": "src\\components\\auth\\auth-provider.tsx",
      "line": 10,
      "assignee": "ai",
      "context": "'use client';\n// TODO: [P2] CLEANUP unused import (L39) [低認知]\n// TODO: [P1] TYPING no-any (L192, L221) [低認知]\n// TODO: [P1] HOOK deps (L365) [低認知]\n// TODO: [P1] REFACTOR src/components/auth/auth-provider.tsx - 縮減責任邊界與資料下傳\n// 原則（Next.js App Router / Firebase）：\n// - Firestore 聚合轉服務層；Provider 僅保留 userId/effectivePermissions 等最小必要。\n// - 禁止在 render 期間做 I/O；mutation 走 Server Actions 或明確事件觸發。\n// - 將 `PermissionGuard` 抽至更小 API（例如 useHasPermission(selector)）以便編譯期 tree-shaking。\n// @assignee ai\n\n// TODO: [P2] REFACTOR src/components/auth/auth-provider.tsx - 奧卡姆剃刀精簡權限/認證 Provider\n// 建議："
    },
    {
      "priority": "P1",
      "type": "REFACTOR",
      "description": "src/components/auth/auth-provider.tsx - 縮減責任邊界與資料下傳",
      "details": [
        "原則（Next.js App Router / Firebase）：",
        "- Firestore 聚合轉服務層；Provider 僅保留 userId/effectivePermissions 等最小必要。",
        "- 禁止在 render 期間做 I/O；mutation 走 Server Actions 或明確事件觸發。",
        "- 將 `PermissionGuard` 抽至更小 API（例如 useHasPermission(selector)）以便編譯期 tree-shaking。"
      ],
      "file": "src\\components\\auth\\auth-provider.tsx",
      "line": 11,
      "assignee": "ai",
      "context": "// TODO: [P2] CLEANUP unused import (L39) [低認知]\n// TODO: [P1] TYPING no-any (L192, L221) [低認知]\n// TODO: [P1] HOOK deps (L365) [低認知]\n// TODO: [P1] REFACTOR src/components/auth/auth-provider.tsx - 縮減責任邊界與資料下傳\n// 原則（Next.js App Router / Firebase）：\n// - Firestore 聚合轉服務層；Provider 僅保留 userId/effectivePermissions 等最小必要。\n// - 禁止在 render 期間做 I/O；mutation 走 Server Actions 或明確事件觸發。\n// - 將 `PermissionGuard` 抽至更小 API（例如 useHasPermission(selector)）以便編譯期 tree-shaking。\n// @assignee ai\n\n// TODO: [P2] REFACTOR src/components/auth/auth-provider.tsx - 奧卡姆剃刀精簡權限/認證 Provider\n// 建議：\n// 1) 將 Firestore 讀取拆為最小 API（單一 fetchUserRoleAssignment），其餘聚合邏輯移至 service；Provider 僅保存必要狀態。"
    },
    {
      "priority": "P1",
      "type": "HOOK",
      "description": "deps (L156) [低認知]",
      "details": [
        "TODO: [P2] REFACTOR src/components/auth/role-manager.tsx - 避免列表渲染期昂貴操作",
        "建議：",
        "- 將 roles/users 載入改為懶載（按需打開時再查詢）；表格僅顯示前幾個權限，其餘以 lazy 展開。",
        "- 對話框抽成小型子元件或同檔內聯，避免 props 鏈過深；重複邏輯 ≥3 次再抽象。",
        "- 權限檢查改用 `useAuth()` 的單一 selector，移除本檔重複 hasPermission 調用。"
      ],
      "file": "src\\components\\auth\\role-manager.tsx",
      "line": 9,
      "assignee": "ai",
      "context": "\n'use client';\n// TODO: [P2] CLEANUP unused imports/vars (L28, L41, L70, L88, L89, L134) [低認知]\n// TODO: [P1] HOOK deps (L156) [低認知]\n// TODO: [P2] REFACTOR src/components/auth/role-manager.tsx - 避免列表渲染期昂貴操作\n// 建議：\n// - 將 roles/users 載入改為懶載（按需打開時再查詢）；表格僅顯示前幾個權限，其餘以 lazy 展開。\n// - 對話框抽成小型子元件或同檔內聯，避免 props 鏈過深；重複邏輯 ≥3 次再抽象。\n// - 權限檢查改用 `useAuth()` 的單一 selector，移除本檔重複 hasPermission 調用。\n// @assignee ai\n\n// TODO: [P2] REFACTOR src/components/auth/role-manager.tsx - 奧卡姆剃刀精簡角色管理\n// 建議："
    },
    {
      "priority": "P1",
      "type": "REFACTOR",
      "description": "src/firebase/provider.tsx - Provider 只做服務注入與極簡使用者狀態",
      "details": [
        "指南：",
        "1) 移除非必要邏輯（如聚合/轉換），避免與授權/角色耦合；與 `components/auth` 分離。",
        "2) 嚴格作為 Client Provider，被 Server Layout 包裹；避免在此放置 UI 或多重副作用。",
        "3) 將錯誤呈現交由上層 global-error，僅維護 user/isUserLoading/userError 的最小狀態。"
      ],
      "file": "src\\firebase\\provider.tsx",
      "line": 2,
      "assignee": "ai",
      "context": "'use client';\n// TODO: [P1] REFACTOR src/firebase/provider.tsx - Provider 只做服務注入與極簡使用者狀態\n// 指南：\n// 1) 移除非必要邏輯（如聚合/轉換），避免與授權/角色耦合；與 `components/auth` 分離。\n// 2) 嚴格作為 Client Provider，被 Server Layout 包裹；避免在此放置 UI 或多重副作用。\n// 3) 將錯誤呈現交由上層 global-error，僅維護 user/isUserLoading/userError 的最小狀態。\n// @assignee ai\n\n\nimport React, { createContext, useContext, ReactNode, useMemo, useState, useEffect } from 'react';\nimport { FirebaseApp } from 'firebase/app';"
    },
    {
      "priority": "P2",
      "type": "REFACTOR",
      "description": "src/components/adjust-stock-dialog.tsx:133 - 修復非空斷言警告",
      "details": [
        "問題：使用非空斷言 (!) 可能導致運行時錯誤",
        "影響：類型安全問題，可能導致應用崩潰",
        "建議：添加適當的類型檢查或使用可選鏈操作符"
      ],
      "file": "src\\components\\adjust-stock-dialog.tsx",
      "line": 129,
      "assignee": "frontend",
      "deadline": "2025-01-25",
      "context": "          let stockDocRef;\r\n\r\n  if (hasExistingStockRecord && stockInfo.stockId) {\r\n              // TODO: [P2] REFACTOR src/components/adjust-stock-dialog.tsx:133 - 修復非空斷言警告\r\n              // 問題：使用非空斷言 (!) 可能導致運行時錯誤\r\n              // 影響：類型安全問題，可能導致應用崩潰\r\n              // 建議：添加適當的類型檢查或使用可選鏈操作符\r\n              // @assignee frontend-team\r\n              // @deadline 2025-01-25\r\n              stockDocRef = doc(firestore, 'accounts', organizationId, 'warehouses', warehouseId, 'stock', stockInfo.stockId);\r\n              batch.update(stockDocRef, { quantity: increment(adjustment) });\r\n          } else {\r\n              // Create a new stock document\r"
    },
    {
      "priority": "P2",
      "type": "REFACTOR",
      "description": "src/components/auth/auth-provider.tsx:195 - 修復 TypeScript any 類型使用",
      "details": [
        "問題：使用 any 類型違反類型安全原則",
        "影響：失去類型檢查，可能導致運行時錯誤",
        "建議：定義具體的類型接口替代 any 類型"
      ],
      "file": "src\\components\\auth\\auth-provider.tsx",
      "line": 197,
      "assignee": "frontend",
      "deadline": "2025-01-25",
      "context": "      const spaceRoles: Record<string, SpaceRoleAssignment> = {};\n      \n      spaceRolesSnapshot.forEach(d => {\n        // TODO: [P2] REFACTOR src/components/auth/auth-provider.tsx:195 - 修復 TypeScript any 類型使用\n        // 問題：使用 any 類型違反類型安全原則\n        // 影響：失去類型檢查，可能導致運行時錯誤\n        // 建議：定義具體的類型接口替代 any 類型\n        // @assignee frontend-team\n        // @deadline 2025-01-25\n        const raw = d.data() as Record<string, unknown>;\n        const assignedAtRaw = raw.assignedAt as unknown;\n        // TODO: 現代化 - 使用類型守衛替代 any，提升類型安全\n        const assignedAtTs: Timestamp = isFirestoreTimestamp(assignedAtRaw)"
    },
    {
      "priority": "P2",
      "type": "REFACTOR",
      "description": "src/components/features/spaces/components/file-explorer/file-explorer.tsx:341 - 修復 TypeScript any 類型使用",
      "details": [
        "問題：使用 any 類型違反類型安全原則",
        "影響：失去類型檢查，可能導致運行時錯誤",
        "建議：定義具體的類型接口替代 any 類型"
      ],
      "file": "src\\components\\features\\spaces\\components\\file-explorer\\file-explorer.tsx",
      "line": 342,
      "assignee": "frontend",
      "deadline": "2025-01-25",
      "context": "  };\r\n\r\n  const handleRestoreItem = (item: FileItem) => {\r\n    // TODO: [P2] REFACTOR src/components/features/spaces/components/file-explorer/file-explorer.tsx:341 - 修復 TypeScript any 類型使用\r\n    // 問題：使用 any 類型違反類型安全原則\r\n    // 影響：失去類型檢查，可能導致運行時錯誤\r\n    // 建議：定義具體的類型接口替代 any 類型\r\n    // @assignee frontend-team\r\n    // @deadline 2025-01-25\r\n    console.log('Restore item:', item);\r\n  };\r\n\r\n  const handlePermanentDelete = (item: FileItem) => {\r"
    },
    {
      "priority": "P2",
      "type": "REFACTOR",
      "description": "src/components/features/spaces/components/file-explorer/file-explorer.tsx:346 - 修復 TypeScript any 類型使用",
      "details": [
        "問題：使用 any 類型違反類型安全原則",
        "影響：失去類型檢查，可能導致運行時錯誤",
        "建議：定義具體的類型接口替代 any 類型"
      ],
      "file": "src\\components\\features\\spaces\\components\\file-explorer\\file-explorer.tsx",
      "line": 352,
      "assignee": "frontend",
      "deadline": "2025-01-25",
      "context": "  };\r\n\r\n  const handlePermanentDelete = (item: FileItem) => {\r\n    // TODO: [P2] REFACTOR src/components/features/spaces/components/file-explorer/file-explorer.tsx:346 - 修復 TypeScript any 類型使用\r\n    // 問題：使用 any 類型違反類型安全原則\r\n    // 影響：失去類型檢查，可能導致運行時錯誤\r\n    // 建議：定義具體的類型接口替代 any 類型\r\n    // @assignee frontend-team\r\n    // @deadline 2025-01-25\r\n    console.log('Permanent delete item:', item);\r\n  };\r\n\r\n  return (\r"
    },
    {
      "priority": "P2",
      "type": "REFACTOR",
      "description": "src/components/features/spaces/components/file-explorer/services/file-preview-service.ts:52 - 修復 TypeScript any 類型使用",
      "details": [
        "問題：使用 any 類型違反類型安全原則",
        "影響：失去類型檢查，可能導致運行時錯誤",
        "建議：定義具體的類型接口替代 any 類型"
      ],
      "file": "src\\components\\features\\spaces\\components\\file-explorer\\services\\file-preview-service.ts",
      "line": 66,
      "assignee": "frontend",
      "deadline": "2025-01-25",
      "context": "  abstract canPreview(file: FileItem): boolean;\r\n  abstract getPreviewConfig(file: FileItem): PreviewConfig;\r\n  abstract toPreviewDocument(file: FileItem): PreviewDocument;\r\n  // TODO: [P2] REFACTOR src/components/features/spaces/components/file-explorer/services/file-preview-service.ts:52 - 修復 TypeScript any 類型使用\r\n  // 問題：使用 any 類型違反類型安全原則\r\n  // 影響：失去類型檢查，可能導致運行時錯誤\r\n  // 建議：定義具體的類型接口替代 any 類型\r\n  // @assignee frontend-team\r\n  // @deadline 2025-01-25\r\n  abstract handleError(error: unknown): PreviewError;\r\n\r\n  getSupportedTypes(): string[] {\r\n    return this.supportedTypes;\r"
    },
    {
      "priority": "P2",
      "type": "REFACTOR",
      "description": "src/components/features/spaces/components/file-explorer/services/file-preview-service.ts:223 - 修復 TypeScript any 類型使用",
      "details": [
        "問題：使用 any 類型違反類型安全原則",
        "影響：失去類型檢查，可能導致運行時錯誤",
        "建議：定義具體的錯誤類型接口替代 any 類型"
      ],
      "file": "src\\components\\features\\spaces\\components\\file-explorer\\services\\file-preview-service.ts",
      "line": 210,
      "assignee": "frontend",
      "deadline": "2025-01-25",
      "context": "    };\r\n  }\r\n\r\n  // TODO: [P2] REFACTOR src/components/features/spaces/components/file-explorer/services/file-preview-service.ts:223 - 修復 TypeScript any 類型使用\r\n  // 問題：使用 any 類型違反類型安全原則\r\n  // 影響：失去類型檢查，可能導致運行時錯誤\r\n  // 建議：定義具體的錯誤類型接口替代 any 類型\r\n  // @assignee frontend-team\r\n  // @deadline 2025-01-25\r\n  handleError(error: Error | unknown): PreviewError {\r\n    // TODO: 現代化 - 使用類型守衛處理 unknown 類型，提升類型安全\r\n    const errorObj = error as Error & { code?: string };\r\n    \r"
    },
    {
      "priority": "P2",
      "type": "REFACTOR",
      "description": "src/components/features/spaces/components/file-explorer/services/file-preview-service.ts:28 - 修復 TypeScript any 類型使用",
      "details": [
        "問題：使用 any 類型違反類型安全原則",
        "影響：失去類型檢查，可能導致運行時錯誤",
        "建議：定義具體的類型接口替代 any 類型"
      ],
      "file": "src\\components\\features\\spaces\\components\\file-explorer\\services\\file-preview-service.ts",
      "line": 240,
      "assignee": "frontend",
      "deadline": "2025-01-25",
      "context": "    if (errorObj.message?.includes('403')) {\r\n      return {\r\n        code: 'ACCESS_DENIED',\r\n        // TODO: [P2] REFACTOR src/components/features/spaces/components/file-explorer/services/file-preview-service.ts:28 - 修復 TypeScript any 類型使用\r\n        // 問題：使用 any 類型違反類型安全原則\r\n        // 影響：失去類型檢查，可能導致運行時錯誤\r\n        // 建議：定義具體的類型接口替代 any 類型\r\n        // @assignee frontend-team\r\n        // @deadline 2025-01-25\r\n        message: '沒有權限存取此檔案',\r\n        details: error,\r\n      };\r\n    }\r"
    },
    {
      "priority": "P2",
      "type": "REFACTOR",
      "description": "src/components/features/spaces/components/file-explorer/services/file-preview-service.ts:50 - 修復 TypeScript any 類型使用",
      "details": [
        "問題：使用 any 類型違反類型安全原則",
        "影響：失去類型檢查，可能導致運行時錯誤",
        "建議：定義具體的類型接口替代 any 類型"
      ],
      "file": "src\\components\\features\\spaces\\components\\file-explorer\\services\\file-preview-service.ts",
      "line": 261,
      "assignee": "frontend",
      "deadline": "2025-01-25",
      "context": "\r\n    return {\r\n      code: 'UNKNOWN_ERROR',\r\n      // TODO: [P2] REFACTOR src/components/features/spaces/components/file-explorer/services/file-preview-service.ts:50 - 修復 TypeScript any 類型使用\r\n      // 問題：使用 any 類型違反類型安全原則\r\n      // 影響：失去類型檢查，可能導致運行時錯誤\r\n      // 建議：定義具體的類型接口替代 any 類型\r\n      // @assignee frontend-team\r\n      // @deadline 2025-01-25\r\n      message: '預覽檔案發生未預期錯誤',\r\n      details: error,\r\n    };\r\n  }\r"
    },
    {
      "priority": "P2",
      "type": "REFACTOR",
      "description": "src/components/features/spaces/components/ - 合併重複的組件邏輯",
      "details": [
        "問題：多個 list/card/dialog 組件存在重複邏輯",
        "影響：代碼重複、維護困難、一致性問題",
        "建議：",
        "1) 創建通用的 List/Card/Dialog 基礎組件",
        "2) 使用 TypeScript 泛型提高類型安全",
        "3) 實現組合模式而非繼承",
        "4) 遵循 DRY 原則和奧卡姆剃刀",
        "Spaces feature components exports"
      ],
      "file": "src\\components\\features\\spaces\\components\\index.ts",
      "line": 18,
      "assignee": "frontend",
      "deadline": "2025-01-30",
      "context": "// @assignee frontend-team\r\n// @deadline 2025-01-20\r\n\r\n// TODO: [P2] REFACTOR src/components/features/spaces/components/ - 合併重複的組件邏輯\r\n// 問題：多個 list/card/dialog 組件存在重複邏輯\r\n// 影響：代碼重複、維護困難、一致性問題\r\n// 建議：\r\n// 1) 創建通用的 List/Card/Dialog 基礎組件\r\n// 2) 使用 TypeScript 泛型提高類型安全\r\n// 3) 實現組合模式而非繼承\r\n// 4) 遵循 DRY 原則和奧卡姆剃刀\r\n// @assignee frontend-team\r\n// @deadline 2025-01-30\r"
    },
    {
      "priority": "P2",
      "type": "PERF",
      "description": "next.config.ts - 實現 Next.js 15 性能優化配置",
      "details": [
        "問題：未充分利用 Next.js 15 的性能優化特性",
        "影響：圖片載入性能差、bundle 大小過大",
        "建議：",
        "1) 啟用 optimizePackageImports 減少 bundle 大小",
        "2) 配置 bundlePagesRouterDependencies 優化依賴打包",
        "3) 添加 experimental.turbo 配置提升開發體驗",
        "4) 配置適當的圖片優化參數"
      ],
      "file": "next.config.ts",
      "line": 16,
      "assignee": "performance",
      "deadline": "2025-02-01",
      "context": "    esmExternals: true,\n  },\n  \n  // TODO: [P2] PERF next.config.ts - 實現 Next.js 15 性能優化配置\n  // 問題：未充分利用 Next.js 15 的性能優化特性\n  // 影響：圖片載入性能差、bundle 大小過大\n  // 建議：\n  // 1) 啟用 optimizePackageImports 減少 bundle 大小\n  // 2) 配置 bundlePagesRouterDependencies 優化依賴打包\n  // 3) 添加 experimental.turbo 配置提升開發體驗\n  // 4) 配置適當的圖片優化參數\n  // @assignee performance-team\n  // @deadline 2025-02-01"
    },
    {
      "priority": "P2",
      "type": "REFACTOR",
      "description": "src/components/features/spaces/hooks/ - 簡化 hooks 邏輯",
      "details": [
        "問題：多個 hooks 文件可能包含重複邏輯",
        "影響：代碼重複、狀態管理複雜",
        "建議：",
        "1) 合併相似的 hooks 邏輯",
        "2) 使用 React 19 的新 hooks 特性",
        "3) 實現更簡單的狀態管理模式",
        "4) 減少不必要的 useEffect 使用",
        "Spaces feature hooks exports"
      ],
      "file": "src\\components\\features\\spaces\\hooks\\index.ts",
      "line": 7,
      "assignee": "frontend",
      "deadline": "2025-02-05",
      "context": " * hooks, such as those for handling actions, into other components.\r\n */\r\n\r\n// TODO: [P2] REFACTOR src/components/features/spaces/hooks/ - 簡化 hooks 邏輯\r\n// 問題：多個 hooks 文件可能包含重複邏輯\r\n// 影響：代碼重複、狀態管理複雜\r\n// 建議：\r\n// 1) 合併相似的 hooks 邏輯\r\n// 2) 使用 React 19 的新 hooks 特性\r\n// 3) 實現更簡單的狀態管理模式\r\n// 4) 減少不必要的 useEffect 使用\r\n// @assignee frontend-team\r\n// @deadline 2025-02-05\r"
    },
    {
      "priority": "P2",
      "type": "FEAT",
      "description": "src/app/actions/contracts.ts - 實作合約 AI 分析",
      "details": [
        "說明：整合 Genkit AI 或其他 AI 服務，輸出摘要與風險點"
      ],
      "file": "src\\app\\actions\\contracts.ts",
      "line": 89,
      "context": "\r\nexport async function analyzeContract(spaceId: string, contractId: string) {\r\n  try {\r\n    // TODO: [P2] FEAT src/app/actions/contracts.ts - 實作合約 AI 分析\r\n    // 說明：整合 Genkit AI 或其他 AI 服務，輸出摘要與風險點\r\n    console.log('Analyzing contract:', contractId);\r\n    \r\n    return { success: true, data: { analysis: 'Contract analysis completed' } };\r\n  } catch (error) {\r\n    console.error('Error analyzing contract:', error);\r\n    return { success: false, error: 'Failed to analyze contract' };\r\n  }\r\n}\r"
    },
    {
      "priority": "P2",
      "type": "FEAT",
      "description": "src/app/actions/contracts.ts - 實作合約 PDF 生成",
      "details": [
        "說明：整合 PDF 生成服務（含標題、雙方、金額、日期、簽名）"
      ],
      "file": "src\\app\\actions\\contracts.ts",
      "line": 102,
      "context": "\r\nexport async function generateContractPDF(spaceId: string, contractId: string) {\r\n  try {\r\n    // TODO: [P2] FEAT src/app/actions/contracts.ts - 實作合約 PDF 生成\r\n    // 說明：整合 PDF 生成服務（含標題、雙方、金額、日期、簽名）\r\n    console.log('Generating PDF for contract:', contractId);\r\n    \r\n    return { success: true, data: { pdfUrl: 'https://example.com/contract.pdf' } };\r\n  } catch (error) {\r\n    console.error('Error generating PDF:', error);\r\n    return { success: false, error: 'Failed to generate PDF' };\r\n  }\r\n}\r"
    },
    {
      "priority": "P2",
      "type": "CLEANUP",
      "description": "unused import (L39) [低認知]",
      "details": [
        "TODO: [P1] TYPING no-any (L192, L221) [低認知]",
        "TODO: [P1] HOOK deps (L365) [低認知]",
        "TODO: [P1] REFACTOR src/components/auth/auth-provider.tsx - 縮減責任邊界與資料下傳",
        "原則（Next.js App Router / Firebase）：",
        "- Firestore 聚合轉服務層；Provider 僅保留 userId/effectivePermissions 等最小必要。",
        "- 禁止在 render 期間做 I/O；mutation 走 Server Actions 或明確事件觸發。",
        "- 將 `PermissionGuard` 抽至更小 API（例如 useHasPermission(selector)）以便編譯期 tree-shaking。"
      ],
      "file": "src\\components\\auth\\auth-provider.tsx",
      "line": 8,
      "assignee": "ai",
      "context": " */\n\n'use client';\n// TODO: [P2] CLEANUP unused import (L39) [低認知]\n// TODO: [P1] TYPING no-any (L192, L221) [低認知]\n// TODO: [P1] HOOK deps (L365) [低認知]\n// TODO: [P1] REFACTOR src/components/auth/auth-provider.tsx - 縮減責任邊界與資料下傳\n// 原則（Next.js App Router / Firebase）：\n// - Firestore 聚合轉服務層；Provider 僅保留 userId/effectivePermissions 等最小必要。\n// - 禁止在 render 期間做 I/O；mutation 走 Server Actions 或明確事件觸發。\n// - 將 `PermissionGuard` 抽至更小 API（例如 useHasPermission(selector)）以便編譯期 tree-shaking。\n// @assignee ai\n"
    },
    {
      "priority": "P2",
      "type": "REFACTOR",
      "description": "src/components/auth/auth-provider.tsx - 奧卡姆剃刀精簡權限/認證 Provider",
      "details": [
        "建議：",
        "1) 將 Firestore 讀取拆為最小 API（單一 fetchUserRoleAssignment），其餘聚合邏輯移至 service；Provider 僅保存必要狀態。",
        "2) 僅暴露最小 API（hasPermission / checkPermission / signIn / signOut），其餘輔助函式封裝內部。",
        "3) 避免渲染期副作用；所有 mutation 綁定事件或 Server Actions；避免將完整使用者資料下傳至 client。"
      ],
      "file": "src\\components\\auth\\auth-provider.tsx",
      "line": 18,
      "context": "// - 將 `PermissionGuard` 抽至更小 API（例如 useHasPermission(selector)）以便編譯期 tree-shaking。\n// @assignee ai\n\n// TODO: [P2] REFACTOR src/components/auth/auth-provider.tsx - 奧卡姆剃刀精簡權限/認證 Provider\n// 建議：\n// 1) 將 Firestore 讀取拆為最小 API（單一 fetchUserRoleAssignment），其餘聚合邏輯移至 service；Provider 僅保存必要狀態。\n// 2) 僅暴露最小 API（hasPermission / checkPermission / signIn / signOut），其餘輔助函式封裝內部。\n// 3) 避免渲染期副作用；所有 mutation 綁定事件或 Server Actions；避免將完整使用者資料下傳至 client。\n\nimport React, { createContext, useContext, useState, useEffect, ReactNode, useCallback } from 'react';\nimport { \n  Permission, \n  UserRoleAssignment, "
    },
    {
      "priority": "P2",
      "type": "CLEANUP",
      "description": "unused imports/vars (L28, L41, L70, L88, L89, L134) [低認知]",
      "details": [
        "TODO: [P1] HOOK deps (L156) [低認知]",
        "TODO: [P2] REFACTOR src/components/auth/role-manager.tsx - 避免列表渲染期昂貴操作",
        "建議：",
        "- 將 roles/users 載入改為懶載（按需打開時再查詢）；表格僅顯示前幾個權限，其餘以 lazy 展開。",
        "- 對話框抽成小型子元件或同檔內聯，避免 props 鏈過深；重複邏輯 ≥3 次再抽象。",
        "- 權限檢查改用 `useAuth()` 的單一 selector，移除本檔重複 hasPermission 調用。"
      ],
      "file": "src\\components\\auth\\role-manager.tsx",
      "line": 8,
      "assignee": "ai",
      "context": " */\n\n'use client';\n// TODO: [P2] CLEANUP unused imports/vars (L28, L41, L70, L88, L89, L134) [低認知]\n// TODO: [P1] HOOK deps (L156) [低認知]\n// TODO: [P2] REFACTOR src/components/auth/role-manager.tsx - 避免列表渲染期昂貴操作\n// 建議：\n// - 將 roles/users 載入改為懶載（按需打開時再查詢）；表格僅顯示前幾個權限，其餘以 lazy 展開。\n// - 對話框抽成小型子元件或同檔內聯，避免 props 鏈過深；重複邏輯 ≥3 次再抽象。\n// - 權限檢查改用 `useAuth()` 的單一 selector，移除本檔重複 hasPermission 調用。\n// @assignee ai\n\n// TODO: [P2] REFACTOR src/components/auth/role-manager.tsx - 奧卡姆剃刀精簡角色管理"
    },
    {
      "priority": "P2",
      "type": "REFACTOR",
      "description": "src/components/auth/role-manager.tsx - 避免列表渲染期昂貴操作",
      "details": [
        "建議：",
        "- 將 roles/users 載入改為懶載（按需打開時再查詢）；表格僅顯示前幾個權限，其餘以 lazy 展開。",
        "- 對話框抽成小型子元件或同檔內聯，避免 props 鏈過深；重複邏輯 ≥3 次再抽象。",
        "- 權限檢查改用 `useAuth()` 的單一 selector，移除本檔重複 hasPermission 調用。"
      ],
      "file": "src\\components\\auth\\role-manager.tsx",
      "line": 10,
      "assignee": "ai",
      "context": "'use client';\n// TODO: [P2] CLEANUP unused imports/vars (L28, L41, L70, L88, L89, L134) [低認知]\n// TODO: [P1] HOOK deps (L156) [低認知]\n// TODO: [P2] REFACTOR src/components/auth/role-manager.tsx - 避免列表渲染期昂貴操作\n// 建議：\n// - 將 roles/users 載入改為懶載（按需打開時再查詢）；表格僅顯示前幾個權限，其餘以 lazy 展開。\n// - 對話框抽成小型子元件或同檔內聯，避免 props 鏈過深；重複邏輯 ≥3 次再抽象。\n// - 權限檢查改用 `useAuth()` 的單一 selector，移除本檔重複 hasPermission 調用。\n// @assignee ai\n\n// TODO: [P2] REFACTOR src/components/auth/role-manager.tsx - 奧卡姆剃刀精簡角色管理\n// 建議：\n// 1) 合併 Firestore 讀取：批量查詢與最小欄位投影；以單一 hook/context 管理 users/roles 狀態，移除重複 useState。"
    },
    {
      "priority": "P2",
      "type": "REFACTOR",
      "description": "src/components/auth/role-manager.tsx - 奧卡姆剃刀精簡角色管理",
      "details": [
        "建議：",
        "1) 合併 Firestore 讀取：批量查詢與最小欄位投影；以單一 hook/context 管理 users/roles 狀態，移除重複 useState。",
        "2) 僅在互動時載入詳情（lazy/load-on-demand），表格只顯示最少欄位；避免在列表渲染時計算聚合。",
        "3) 將對話框組件移至同一檔內的輕量內聯或共用子目錄；重複出現 ≥3 次的表單行為再抽象。",
        "4) 權限判斷集中在 `useAuth()` 暴露的單一 selector，避免在本檔重複 hasPermission。"
      ],
      "file": "src\\components\\auth\\role-manager.tsx",
      "line": 17,
      "context": "// - 權限檢查改用 `useAuth()` 的單一 selector，移除本檔重複 hasPermission 調用。\n// @assignee ai\n\n// TODO: [P2] REFACTOR src/components/auth/role-manager.tsx - 奧卡姆剃刀精簡角色管理\n// 建議：\n// 1) 合併 Firestore 讀取：批量查詢與最小欄位投影；以單一 hook/context 管理 users/roles 狀態，移除重複 useState。\n// 2) 僅在互動時載入詳情（lazy/load-on-demand），表格只顯示最少欄位；避免在列表渲染時計算聚合。\n// 3) 將對話框組件移至同一檔內的輕量內聯或共用子目錄；重複出現 ≥3 次的表單行為再抽象。\n// 4) 權限判斷集中在 `useAuth()` 暴露的單一 selector，避免在本檔重複 hasPermission。\n\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';"
    },
    {
      "priority": "P2",
      "type": "REFACTOR",
      "description": "src/components/auth/role-manager.tsx:28 - 清理未使用的導入",
      "details": [
        "問題：'Switch' 已導入但從未使用",
        "影響：增加 bundle 大小，影響性能",
        "建議：移除未使用的導入或添加下劃線前綴表示有意未使用"
      ],
      "file": "src\\components\\auth\\role-manager.tsx",
      "line": 32,
      "assignee": "frontend",
      "context": "import { Badge } from '@/components/ui/badge';\nimport { Switch as _Switch } from '@/components/ui/switch';\n\n// TODO: [P2] REFACTOR src/components/auth/role-manager.tsx:28 - 清理未使用的導入\n// 問題：'Switch' 已導入但從未使用\n// 影響：增加 bundle 大小，影響性能\n// 建議：移除未使用的導入或添加下劃線前綴表示有意未使用\n// @assignee frontend-team\n\nimport { \n  Dialog, \n  DialogContent, \n  DialogHeader, "
    },
    {
      "priority": "P2",
      "type": "REFACTOR",
      "description": "src/components/auth/role-manager.tsx:34 - 清理未使用的導入",
      "details": [
        "問題：'DialogTrigger' 已導入但從未使用",
        "影響：增加 bundle 大小，影響性能",
        "建議：移除未使用的導入或添加下劃線前綴表示有意未使用"
      ],
      "file": "src\\components\\auth\\role-manager.tsx",
      "line": 46,
      "assignee": "frontend",
      "context": "  DialogTrigger as _DialogTrigger \n} from '@/components/ui/dialog';\n\n// TODO: [P2] REFACTOR src/components/auth/role-manager.tsx:34 - 清理未使用的導入\n// 問題：'DialogTrigger' 已導入但從未使用\n// 影響：增加 bundle 大小，影響性能\n// 建議：移除未使用的導入或添加下劃線前綴表示有意未使用\n// @assignee frontend-team\nimport { \n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,"
    },
    {
      "priority": "P2",
      "type": "REFACTOR",
      "description": "src/components/auth/role-manager.tsx:57 - 清理未使用的導入",
      "details": [
        "問題：'Settings' 已導入但從未使用",
        "影響：增加 bundle 大小，影響性能",
        "建議：移除未使用的導入或添加下劃線前綴表示有意未使用"
      ],
      "file": "src\\components\\auth\\role-manager.tsx",
      "line": 76,
      "assignee": "frontend",
      "context": "  Search\n} from 'lucide-react';\n\n// TODO: [P2] REFACTOR src/components/auth/role-manager.tsx:57 - 清理未使用的導入\n// 問題：'Settings' 已導入但從未使用\n// 影響：增加 bundle 大小，影響性能\n// 建議：移除未使用的導入或添加下劃線前綴表示有意未使用\n// @assignee frontend-team\n\nimport { useAuth } from './auth-provider';\n\n// TODO: [P2] REFACTOR src/components/auth/role-manager.tsx:61 - 清理未使用的導入\n// 問題：'roleManagementService' 已導入但從未使用"
    },
    {
      "priority": "P2",
      "type": "REFACTOR",
      "description": "src/components/auth/role-manager.tsx:61 - 清理未使用的導入",
      "details": [
        "問題：'roleManagementService' 已導入但從未使用",
        "影響：增加 bundle 大小，影響性能",
        "建議：移除未使用的導入或添加下劃線前綴表示有意未使用"
      ],
      "file": "src\\components\\auth\\role-manager.tsx",
      "line": 84,
      "assignee": "frontend",
      "context": "\nimport { useAuth } from './auth-provider';\n\n// TODO: [P2] REFACTOR src/components/auth/role-manager.tsx:61 - 清理未使用的導入\n// 問題：'roleManagementService' 已導入但從未使用\n// 影響：增加 bundle 大小，影響性能\n// 建議：移除未使用的導入或添加下劃線前綴表示有意未使用\n// @assignee frontend-team\n\nimport { roleManagementService as _roleManagementService } from '@/lib/role-management';\nimport { Permission, UserRoleAssignment as _UserRoleAssignment } from '@/lib/types-unified';\n\n// TODO: [P2] REFACTOR src/components/auth/role-manager.tsx:62 - 清理未使用的導入"
    },
    {
      "priority": "P2",
      "type": "REFACTOR",
      "description": "src/components/auth/role-manager.tsx:62 - 清理未使用的導入",
      "details": [
        "問題：'UserRoleAssignment' 已導入但從未使用",
        "影響：增加 bundle 大小，影響性能",
        "建議：移除未使用的導入或添加下劃線前綴表示有意未使用"
      ],
      "file": "src\\components\\auth\\role-manager.tsx",
      "line": 93,
      "assignee": "frontend",
      "context": "import { roleManagementService as _roleManagementService } from '@/lib/role-management';\nimport { Permission, UserRoleAssignment as _UserRoleAssignment } from '@/lib/types-unified';\n\n// TODO: [P2] REFACTOR src/components/auth/role-manager.tsx:62 - 清理未使用的導入\n// 問題：'UserRoleAssignment' 已導入但從未使用\n// 影響：增加 bundle 大小，影響性能\n// 建議：移除未使用的導入或添加下劃線前綴表示有意未使用\n// @assignee frontend-team\nimport { \n  getFirestore, \n  collection, \n  doc, \n  getDocs, "
    },
    {
      "priority": "P2",
      "type": "FEAT",
      "description": "src/components/features/organizations/components/roles/create-role-dialog.tsx - 實現角色創建 API 調用",
      "details": [],
      "file": "src\\components\\features\\organizations\\components\\roles\\create-role-dialog.tsx",
      "line": 70,
      "context": "  const onSubmit = async (data: RoleFormData) => {\r\n    setIsLoading(true);\r\n    try {\r\n      // TODO: [P2] FEAT src/components/features/organizations/components/roles/create-role-dialog.tsx - 實現角色創建 API 調用\r\n      console.log('Creating role for organization:', organizationId, data);\r\n      // @assignee dev\r\n      \r\n      // Simulate API call\r\n      await new Promise(resolve => setTimeout(resolve, 1000));\r\n      \r\n      reset();\r\n      onOpenChange(false);\r\n    } catch (error) {\r"
    },
    {
      "priority": "P2",
      "type": "FEAT",
      "description": "src/components/features/organizations/components/roles/role-list.tsx - 實現權限更新邏輯",
      "details": [],
      "file": "src\\components\\features\\organizations\\components\\roles\\role-list.tsx",
      "line": 169,
      "context": "  );\r\n\r\n  const handlePermissionToggle = (roleId: string, permission: keyof Role['permissions']) => {\r\n    // TODO: [P2] FEAT src/components/features/organizations/components/roles/role-list.tsx - 實現權限更新邏輯\r\n    console.log(`Toggle ${permission} for role ${roleId}`);\r\n    // @assignee dev\r\n  };\r\n\r\n  const handleAccessLevelChange = (roleId: string, accessLevel: string) => {\r\n    // TODO: [P2] FEAT src/components/features/organizations/components/roles/role-list.tsx - 實現訪問級別更新邏輯\r\n    console.log(`Change access level to ${accessLevel} for role ${roleId}`);\r\n    // @assignee dev\r\n  };\r"
    },
    {
      "priority": "P2",
      "type": "FEAT",
      "description": "src/components/features/organizations/components/roles/role-list.tsx - 實現訪問級別更新邏輯",
      "details": [],
      "file": "src\\components\\features\\organizations\\components\\roles\\role-list.tsx",
      "line": 175,
      "context": "  };\r\n\r\n  const handleAccessLevelChange = (roleId: string, accessLevel: string) => {\r\n    // TODO: [P2] FEAT src/components/features/organizations/components/roles/role-list.tsx - 實現訪問級別更新邏輯\r\n    console.log(`Change access level to ${accessLevel} for role ${roleId}`);\r\n    // @assignee dev\r\n  };\r\n\r\n  return (\r\n    <div className=\"space-y-6\">\r\n      {/* Header */}\r\n      <div className=\"flex items-center justify-between\">\r\n        <div>\r"
    },
    {
      "priority": "P2",
      "type": "REFACTOR",
      "description": "src/components/features/spaces/components/acceptance/acceptance-item.tsx:5 - 清理未使用的導入",
      "details": [
        "問題：'Button' 已導入但從未使用",
        "影響：增加 bundle 大小，影響性能",
        "建議：移除未使用的導入或添加下劃線前綴表示有意未使用"
      ],
      "file": "src\\components\\features\\spaces\\components\\acceptance\\acceptance-item.tsx",
      "line": 7,
      "assignee": "frontend",
      "context": "import { Badge } from '@/components/ui/badge';\r\nimport { Button as _Button } from '@/components/ui/button';\r\n\r\n// TODO: [P2] REFACTOR src/components/features/spaces/components/acceptance/acceptance-item.tsx:5 - 清理未使用的導入\r\n// 問題：'Button' 已導入但從未使用\r\n// 影響：增加 bundle 大小，影響性能\r\n// 建議：移除未使用的導入或添加下劃線前綴表示有意未使用\r\n// @assignee frontend-team\r\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';\r\nimport { Progress } from '@/components/ui/progress';\r\nimport { ScrollArea } from '@/components/ui/scroll-area';\r\nimport { Separator } from '@/components/ui/separator';\r"
    },
    {
      "priority": "P2",
      "type": "FIX",
      "description": "src/components/features/spaces/components/acceptance/initiate-acceptance-flow.tsx - 修正 unknown/any 類型",
      "details": [
        "說明：以具名型別替代 unknown，為 acceptance 建立明確型別介面"
      ],
      "file": "src\\components\\features\\spaces\\components\\acceptance\\initiate-acceptance-flow.tsx",
      "line": 29,
      "context": "  spaceId: string;\r\n  open: boolean;\r\n  onOpenChange: (open: boolean) => void;\r\n  // TODO: [P2] FIX src/components/features/spaces/components/acceptance/initiate-acceptance-flow.tsx - 修正 unknown/any 類型\r\n  // 說明：以具名型別替代 unknown，為 acceptance 建立明確型別介面\r\n  onAcceptanceCreated?: (acceptance: unknown) => void;\r\n}\r\n\r\nexport function InitiateAcceptanceFlow({\r\n  spaceId,\r\n  open,\r\n  onOpenChange,\r\n  onAcceptanceCreated,\r"
    },
    {
      "priority": "P2",
      "type": "FEAT",
      "description": "src/components/features/spaces/components/acceptance/initiate-acceptance-flow.tsx - 實作創建驗收 API 呼叫",
      "details": [],
      "file": "src\\components\\features\\spaces\\components\\acceptance\\initiate-acceptance-flow.tsx",
      "line": 57,
      "context": "  const onSubmit = async (data: InitiateAcceptanceFormValues) => {\r\n    setIsLoading(true);\r\n    try {\r\n      // TODO: [P2] FEAT src/components/features/spaces/components/acceptance/initiate-acceptance-flow.tsx - 實作創建驗收 API 呼叫\r\n      console.log('Creating acceptance item:', { spaceId, ...data });\r\n      // @assignee dev\r\n      await new Promise(resolve => setTimeout(resolve, 1000)); // Simulate API call\r\n      \r\n      const newAcceptance = {\r\n        id: Date.now().toString(),\r\n        ...data,\r\n        status: 'pending' as const,\r\n        requester: { id: 'current-user', name: 'Current User' },\r"
    },
    {
      "priority": "P2",
      "type": "REFACTOR",
      "description": "src/components/features/spaces/components/contracts/contract-details.tsx:3 - 清理未使用的導入",
      "details": [
        "問題：'Avatar', 'AvatarFallback', 'AvatarImage' 已導入但從未使用",
        "影響：增加 bundle 大小，影響性能",
        "建議：移除未使用的導入或添加下劃線前綴表示有意未使用"
      ],
      "file": "src\\components\\features\\spaces\\components\\contracts\\contract-details.tsx",
      "line": 5,
      "assignee": "frontend",
      "context": "\r\nimport { Avatar as _Avatar, AvatarFallback as _AvatarFallback, AvatarImage as _AvatarImage } from '@/components/ui/avatar';\r\n\r\n// TODO: [P2] REFACTOR src/components/features/spaces/components/contracts/contract-details.tsx:3 - 清理未使用的導入\r\n// 問題：'Avatar', 'AvatarFallback', 'AvatarImage' 已導入但從未使用\r\n// 影響：增加 bundle 大小，影響性能\r\n// 建議：移除未使用的導入或添加下劃線前綴表示有意未使用\r\n// @assignee frontend-team\r\n\r\nimport { Badge } from '@/components/ui/badge';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';\r"
    },
    {
      "priority": "P2",
      "type": "REFACTOR",
      "description": "src/components/features/spaces/components/contracts/contract-details.tsx:10 - 清理未使用的導入",
      "details": [
        "問題：'Phone' 已導入但從未使用",
        "影響：增加 bundle 大小，影響性能",
        "建議：移除未使用的導入或添加下劃線前綴表示有意未使用"
      ],
      "file": "src\\components\\features\\spaces\\components\\contracts\\contract-details.tsx",
      "line": 19,
      "assignee": "frontend",
      "context": "import { Separator } from '@/components/ui/separator';\r\nimport { Calendar, DollarSign, FileText, Mail, Phone as _Phone, User } from 'lucide-react';\r\n\r\n// TODO: [P2] REFACTOR src/components/features/spaces/components/contracts/contract-details.tsx:10 - 清理未使用的導入\r\n// 問題：'Phone' 已導入但從未使用\r\n// 影響：增加 bundle 大小，影響性能\r\n// 建議：移除未使用的導入或添加下劃線前綴表示有意未使用\r\n// @assignee frontend-team\r\nimport { formatDistanceToNow } from 'date-fns';\r\n\r\ninterface Contract {\r\n  id: string;\r\n  title: string;\r"
    },
    {
      "priority": "P2",
      "type": "FEAT",
      "description": "src/components/features/spaces/components/contracts/contract-details.tsx - 實現合約下載邏輯",
      "details": [],
      "file": "src\\components\\features\\spaces\\components\\contracts\\contract-details.tsx",
      "line": 110,
      "context": "  };\r\n\r\n  const handleDownload = () => {\r\n    // TODO: [P2] FEAT src/components/features/spaces/components/contracts/contract-details.tsx - 實現合約下載邏輯\r\n    console.log('Downloading contract:', contract.title);\r\n    // @assignee dev\r\n  };\r\n\r\n  return (\r\n    <Dialog open={open} onOpenChange={onOpenChange}>\r\n      <DialogContent className=\"max-w-4xl max-h-[90vh]\">\r\n        <DialogHeader>\r\n          <DialogTitle className=\"flex items-center gap-2\">\r"
    },
    {
      "priority": "P2",
      "type": "FIX",
      "description": "src/components/features/spaces/components/contracts/contract-list.tsx - 修復 JSX 語法錯誤（第317行未閉合標籤或無效字元）",
      "details": [],
      "file": "src\\components\\features\\spaces\\components\\contracts\\contract-list.tsx",
      "line": 3,
      "context": "'use client';\r\n\r\n// TODO: [P2] FIX src/components/features/spaces/components/contracts/contract-list.tsx - 修復 JSX 語法錯誤（第317行未閉合標籤或無效字元）\r\nimport { Badge } from '@/components/ui/badge';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { Input } from '@/components/ui/input';\r\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\r\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';\r\nimport { FileText as _FileText, Plus, Search, Filter, Calendar, DollarSign as _DollarSign } from 'lucide-react';\r\n\r\n// TODO: [P2] REFACTOR src/components/features/spaces/components/contracts/contract-list.tsx:10 - 清理未使用的導入\r"
    },
    {
      "priority": "P2",
      "type": "REFACTOR",
      "description": "src/components/features/spaces/components/contracts/contract-list.tsx:10 - 清理未使用的導入",
      "details": [
        "問題：'FileText', 'DollarSign' 已導入但從未使用",
        "影響：增加 bundle 大小，影響性能",
        "建議：移除未使用的導入或添加下劃線前綴表示有意未使用",
        "TODO: [P2] REFACTOR src/components/features/spaces/components/contracts/contract-list.tsx - 奧卡姆剃刀精簡列表",
        "建議：",
        "1) 將統計（total/pending/active）移至 memo 或上層 hook，避免在渲染期反覆計算。",
        "2) 類型圖示以 CSS/variant 取代多分支；最小化 UI 條件分支。",
        "3) 詳情 `ContractDetails` 採 lazy import（動態載入），減少首屏負擔。"
      ],
      "file": "src\\components\\features\\spaces\\components\\contracts\\contract-list.tsx",
      "line": 12,
      "assignee": "frontend",
      "context": "import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';\r\nimport { FileText as _FileText, Plus, Search, Filter, Calendar, DollarSign as _DollarSign } from 'lucide-react';\r\n\r\n// TODO: [P2] REFACTOR src/components/features/spaces/components/contracts/contract-list.tsx:10 - 清理未使用的導入\r\n// 問題：'FileText', 'DollarSign' 已導入但從未使用\r\n// 影響：增加 bundle 大小，影響性能\r\n// 建議：移除未使用的導入或添加下劃線前綴表示有意未使用\r\n// @assignee frontend-team\r\n// TODO: [P2] REFACTOR src/components/features/spaces/components/contracts/contract-list.tsx - 奧卡姆剃刀精簡列表\r\n// 建議：\r\n// 1) 將統計（total/pending/active）移至 memo 或上層 hook，避免在渲染期反覆計算。\r\n// 2) 類型圖示以 CSS/variant 取代多分支；最小化 UI 條件分支。\r\n// 3) 詳情 `ContractDetails` 採 lazy import（動態載入），減少首屏負擔。\r"
    },
    {
      "priority": "P2",
      "type": "REFACTOR",
      "description": "src/components/features/spaces/components/contracts/contract-list.tsx - 奧卡姆剃刀精簡列表",
      "details": [
        "建議：",
        "1) 將統計（total/pending/active）移至 memo 或上層 hook，避免在渲染期反覆計算。",
        "2) 類型圖示以 CSS/variant 取代多分支；最小化 UI 條件分支。",
        "3) 詳情 `ContractDetails` 採 lazy import（動態載入），減少首屏負擔。"
      ],
      "file": "src\\components\\features\\spaces\\components\\contracts\\contract-list.tsx",
      "line": 17,
      "context": "// 影響：增加 bundle 大小，影響性能\r\n// 建議：移除未使用的導入或添加下劃線前綴表示有意未使用\r\n// @assignee frontend-team\r\n// TODO: [P2] REFACTOR src/components/features/spaces/components/contracts/contract-list.tsx - 奧卡姆剃刀精簡列表\r\n// 建議：\r\n// 1) 將統計（total/pending/active）移至 memo 或上層 hook，避免在渲染期反覆計算。\r\n// 2) 類型圖示以 CSS/variant 取代多分支；最小化 UI 條件分支。\r\n// 3) 詳情 `ContractDetails` 採 lazy import（動態載入），減少首屏負擔。\r\nimport { CreateContractDialog } from './create-contract-dialog';\r\nimport { ContractDetails } from './contract-details';\r\nimport { useState } from 'react';\r\n\r\ninterface Contract {\r"
    },
    {
      "priority": "P2",
      "type": "FIX",
      "description": "src/components/features/spaces/components/contracts/create-contract-dialog.tsx - 修正 unknown/any 類型",
      "details": [
        "說明：以具名型別替代 unknown，為 contract 建立明確型別介面"
      ],
      "file": "src\\components\\features\\spaces\\components\\contracts\\create-contract-dialog.tsx",
      "line": 36,
      "context": "  spaceId: string;\r\n  open: boolean;\r\n  onOpenChange: (open: boolean) => void;\r\n  // TODO: [P2] FIX src/components/features/spaces/components/contracts/create-contract-dialog.tsx - 修正 unknown/any 類型\r\n  // 說明：以具名型別替代 unknown，為 contract 建立明確型別介面\r\n  onContractCreated?: (contract: unknown) => void;\r\n}\r\n\r\nexport function CreateContractDialog({\r\n  spaceId,\r\n  open,\r\n  onOpenChange,\r\n  onContractCreated,\r"
    },
    {
      "priority": "P2",
      "type": "FIX",
      "description": "src/components/features/spaces/components/file-explorer/context-menu.tsx - 修復字符串字面量錯誤（第126行未終止）",
      "details": [],
      "file": "src\\components\\features\\spaces\\components\\file-explorer\\context-menu.tsx",
      "line": 7,
      "context": " * selected item. A separate context menu for the toolbar is also defined here.\r\n */\r\n'use client';\r\n// TODO: [P2] FIX src/components/features/spaces/components/file-explorer/context-menu.tsx - 修復字符串字面量錯誤（第126行未終止）\r\n\r\nimport React from 'react';\r\nimport {\r\n  DropdownMenu,\r\n  DropdownMenuContent,\r\n  DropdownMenuItem,\r\n  DropdownMenuSeparator,\r\n  DropdownMenuTrigger,\r\n} from '@/components/ui/dropdown-menu';\r"
    },
    {
      "priority": "P2",
      "type": "FIX",
      "description": "src/components/features/spaces/components/file-explorer/deleted-items.tsx - 修復字符串字面量錯誤（第50行未終止）",
      "details": [],
      "file": "src\\components\\features\\spaces\\components\\file-explorer\\deleted-items.tsx",
      "line": 8,
      "context": " * file explorer toolbar.\r\n */\r\n'use client';\r\n// TODO: [P2] FIX src/components/features/spaces/components/file-explorer/deleted-items.tsx - 修復字符串字面量錯誤（第50行未終止）\r\n\r\nimport React, { useState } from 'react';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';\r\nimport { Badge } from '@/components/ui/badge';\r\nimport { Trash2, RotateCcw, Trash, Calendar, User } from 'lucide-react';\r\nimport { cn } from '@/lib/utils';\r\nimport { type FileItem } from './folder-tree';\r"
    },
    {
      "priority": "P2",
      "type": "FIX",
      "description": "src/components/features/spaces/components/file-explorer/empty-folder-state.tsx - 修復字符串字面量錯誤（第31行未終止）",
      "details": [],
      "file": "src\\components\\features\\spaces\\components\\file-explorer\\empty-folder-state.tsx",
      "line": 8,
      "context": " * for new or empty directories.\r\n */\r\n'use client';\r\n// TODO: [P2] FIX src/components/features/spaces/components/file-explorer/empty-folder-state.tsx - 修復字符串字面量錯誤（第31行未終止）\r\n\r\nimport React from 'react';\r\nimport { Button } from '@/components/ui/button';\r\nimport { UploadCloud, FolderOpen } from 'lucide-react';\r\n\r\ninterface EmptyFolderStateProps {\r\n  onUpload: () => void;\r\n  folderName?: string;\r\n}\r"
    },
    {
      "priority": "P2",
      "type": "REFACTOR",
      "description": "src/components/features/spaces/components/file-explorer/file-table.tsx:29 - 清理未使用的導入",
      "details": [
        "問題：'FolderOpen' 已導入但從未使用",
        "影響：增加 bundle 大小，影響性能",
        "建議：移除未使用的導入或添加下劃線前綴表示有意未使用"
      ],
      "file": "src\\components\\features\\spaces\\components\\file-explorer\\file-table.tsx",
      "line": 27,
      "assignee": "frontend",
      "context": "  FolderOpen as _FolderOpen\r\n} from 'lucide-react';\r\n\r\n// TODO: [P2] REFACTOR src/components/features/spaces/components/file-explorer/file-table.tsx:29 - 清理未使用的導入\r\n// 問題：'FolderOpen' 已導入但從未使用\r\n// 影響：增加 bundle 大小，影響性能\r\n// 建議：移除未使用的導入或添加下劃線前綴表示有意未使用\r\n// @assignee frontend-team\r\nimport { cn } from '@/lib/utils';\r\nimport { type FileItem } from './folder-tree';\r\nimport { ColumnSettingsMenu, type ColumnConfig } from './column-settings-menu';\r\n\r\ninterface FileTableProps {\r"
    },
    {
      "priority": "P2",
      "type": "REFACTOR",
      "description": "src/components/features/spaces/components/file-explorer/filter-panel.tsx:27 - 清理未使用的導入",
      "details": [
        "問題：'Filter' 已導入但從未使用",
        "影響：增加 bundle 大小，影響性能",
        "建議：移除未使用的導入或添加下劃線前綴表示有意未使用"
      ],
      "file": "src\\components\\features\\spaces\\components\\file-explorer\\filter-panel.tsx",
      "line": 34,
      "assignee": "frontend",
      "context": "  Plus\r\n} from 'lucide-react';\r\n\r\n// TODO: [P2] REFACTOR src/components/features/spaces/components/file-explorer/filter-panel.tsx:27 - 清理未使用的導入\r\n// 問題：'Filter' 已導入但從未使用\r\n// 影響：增加 bundle 大小，影響性能\r\n// 建議：移除未使用的導入或添加下劃線前綴表示有意未使用\r\n// @assignee frontend-team\r\n\r\n// TODO: [P2] REFACTOR src/components/features/spaces/components/file-explorer/filter-panel.tsx:29 - 清理未使用的導入\r\n// 問題：'Save' 已導入但從未使用\r\n// 影響：增加 bundle 大小，影響性能\r\n// 建議：移除未使用的導入或添加下劃線前綴表示有意未使用\r"
    },
    {
      "priority": "P2",
      "type": "REFACTOR",
      "description": "src/components/features/spaces/components/file-explorer/filter-panel.tsx:29 - 清理未使用的導入",
      "details": [
        "問題：'Save' 已導入但從未使用",
        "影響：增加 bundle 大小，影響性能",
        "建議：移除未使用的導入或添加下劃線前綴表示有意未使用"
      ],
      "file": "src\\components\\features\\spaces\\components\\file-explorer\\filter-panel.tsx",
      "line": 40,
      "assignee": "frontend",
      "context": "// 建議：移除未使用的導入或添加下劃線前綴表示有意未使用\r\n// @assignee frontend-team\r\n\r\n// TODO: [P2] REFACTOR src/components/features/spaces/components/file-explorer/filter-panel.tsx:29 - 清理未使用的導入\r\n// 問題：'Save' 已導入但從未使用\r\n// 影響：增加 bundle 大小，影響性能\r\n// 建議：移除未使用的導入或添加下劃線前綴表示有意未使用\r\n// @assignee frontend-team\r\n\r\nimport { cn as _cn } from '@/lib/utils';\r\n\r\n// TODO: [P2] REFACTOR src/components/features/spaces/components/file-explorer/filter-panel.tsx:34 - 清理未使用的導入\r\n// 問題：'cn' 已導入但從未使用\r"
    },
    {
      "priority": "P2",
      "type": "REFACTOR",
      "description": "src/components/features/spaces/components/file-explorer/filter-panel.tsx:34 - 清理未使用的導入",
      "details": [
        "問題：'cn' 已導入但從未使用",
        "影響：增加 bundle 大小，影響性能",
        "建議：移除未使用的導入或添加下劃線前綴表示有意未使用"
      ],
      "file": "src\\components\\features\\spaces\\components\\file-explorer\\filter-panel.tsx",
      "line": 48,
      "assignee": "frontend",
      "context": "\r\nimport { cn as _cn } from '@/lib/utils';\r\n\r\n// TODO: [P2] REFACTOR src/components/features/spaces/components/file-explorer/filter-panel.tsx:34 - 清理未使用的導入\r\n// 問題：'cn' 已導入但從未使用\r\n// 影響：增加 bundle 大小，影響性能\r\n// 建議：移除未使用的導入或添加下劃線前綴表示有意未使用\r\n// @assignee frontend-team\r\nimport { format } from 'date-fns';\r\nimport { zhTW } from 'date-fns/locale';\r\n\r\nexport interface FilterOptions {\r\n  searchQuery: string;\r"
    },
    {
      "priority": "P2",
      "type": "REFACTOR",
      "description": "src/components/features/spaces/components/file-explorer/folder-tree.tsx:12 - Clean up unused imports",
      "details": [
        "Issue: 'Button' is imported but never used",
        "Impact: Increases bundle size and affects performance",
        "Suggestion: Remove the unused import or prefix with underscore to indicate intentional unused"
      ],
      "file": "src\\components\\features\\spaces\\components\\file-explorer\\folder-tree.tsx",
      "line": 13,
      "assignee": "frontend",
      "context": "import React, { useState } from 'react';\r\nimport { Button as _Button } from '@/components/ui/button';\r\n\r\n// TODO: [P2] REFACTOR src/components/features/spaces/components/file-explorer/folder-tree.tsx:12 - Clean up unused imports\r\n// Issue: 'Button' is imported but never used\r\n// Impact: Increases bundle size and affects performance\r\n// Suggestion: Remove the unused import or prefix with underscore to indicate intentional unused\r\n// @assignee frontend-team\r\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\r\nimport { ScrollArea } from '@/components/ui/scroll-area';\r\nimport { \r\n  ChevronRight, \r\n  ChevronDown, \r"
    },
    {
      "priority": "P2",
      "type": "REFACTOR",
      "description": "src/components/features/spaces/components/file-explorer/toolbar.tsx:13 - 清理未使用的導入",
      "details": [
        "問題：'Input' 已導入但從未使用",
        "影響：增加 bundle 大小，影響性能",
        "建議：移除未使用的導入或添加下劃線前綴表示有意未使用"
      ],
      "file": "src\\components\\features\\spaces\\components\\file-explorer\\toolbar.tsx",
      "line": 15,
      "assignee": "frontend",
      "context": "import { Button } from '@/components/ui/button';\r\nimport { Input as _Input } from '@/components/ui/input';\r\n\r\n// TODO: [P2] REFACTOR src/components/features/spaces/components/file-explorer/toolbar.tsx:13 - 清理未使用的導入\r\n// 問題：'Input' 已導入但從未使用\r\n// 影響：增加 bundle 大小，影響性能\r\n// 建議：移除未使用的導入或添加下劃線前綴表示有意未使用\r\n// @assignee frontend-team\r\nimport {\r\n  DropdownMenu,\r\n  DropdownMenuContent,\r\n  DropdownMenuItem,\r\n  DropdownMenuTrigger,\r"
    },
    {
      "priority": "P2",
      "type": "REFACTOR",
      "description": "src/components/features/spaces/components/file-explorer/upload-dialog.tsx:12 - 清理未使用的導入",
      "details": [
        "問題：'Input' 已導入但從未使用",
        "影響：增加 bundle 大小，影響性能",
        "建議：移除未使用的導入或添加下劃線前綴表示有意未使用"
      ],
      "file": "src\\components\\features\\spaces\\components\\file-explorer\\upload-dialog.tsx",
      "line": 14,
      "assignee": "frontend",
      "context": "import { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';\r\nimport { Input as _Input } from '@/components/ui/input';\r\n\r\n// TODO: [P2] REFACTOR src/components/features/spaces/components/file-explorer/upload-dialog.tsx:12 - 清理未使用的導入\r\n// 問題：'Input' 已導入但從未使用\r\n// 影響：增加 bundle 大小，影響性能\r\n// 建議：移除未使用的導入或添加下劃線前綴表示有意未使用\r\n// @assignee frontend-team\r\nimport { Label } from '@/components/ui/label';\r\nimport { Switch } from '@/components/ui/switch';\r\nimport { Progress } from '@/components/ui/progress';\r\nimport { \r\n  Upload, \r"
    },
    {
      "priority": "P2",
      "type": "FIX",
      "description": "src/components/features/spaces/components/issues/create-issue-form.tsx - 修正 unknown/any 類型",
      "details": [
        "說明：以具名型別替代 unknown，為 issue 建立明確型別介面"
      ],
      "file": "src\\components\\features\\spaces\\components\\issues\\create-issue-form.tsx",
      "line": 29,
      "context": "  spaceId: string;\r\n  open: boolean;\r\n  onOpenChange: (open: boolean) => void;\r\n  // TODO: [P2] FIX src/components/features/spaces/components/issues/create-issue-form.tsx - 修正 unknown/any 類型\r\n  // 說明：以具名型別替代 unknown，為 issue 建立明確型別介面\r\n  onIssueCreated?: (issue: unknown) => void;\r\n}\r\n\r\nexport function CreateIssueForm({ spaceId, open, onOpenChange, onIssueCreated }: CreateIssueFormProps) {\r\n  const [isLoading, setIsLoading] = useState(false);\r\n\r\n  const form = useForm<CreateIssueFormValues>({\r\n    resolver: zodResolver(createIssueSchema),\r"
    },
    {
      "priority": "P2",
      "type": "FEAT",
      "description": "src/components/features/spaces/components/issues/create-issue-form.tsx - 實作創建問題 API 呼叫",
      "details": [],
      "file": "src\\components\\features\\spaces\\components\\issues\\create-issue-form.tsx",
      "line": 52,
      "context": "  const onSubmit = async (data: CreateIssueFormValues) => {\r\n    setIsLoading(true);\r\n    try {\r\n      // TODO: [P2] FEAT src/components/features/spaces/components/issues/create-issue-form.tsx - 實作創建問題 API 呼叫\r\n      console.log('Creating issue:', { spaceId, ...data });\r\n      // @assignee dev\r\n      await new Promise(resolve => setTimeout(resolve, 1000)); // Simulate API call\r\n      \r\n      const newIssue = {\r\n        id: Date.now().toString(),\r\n        ...data,\r\n        status: 'open' as const,\r\n        reporter: { id: 'current-user', name: 'Current User' },\r"
    },
    {
      "priority": "P2",
      "type": "FEAT",
      "description": "src/components/features/spaces/components/overview/hooks/use-dashboard-data.ts - 替換為實際的 API 調用",
      "details": [
        "這裡使用模擬數據"
      ],
      "file": "src\\components\\features\\spaces\\components\\overview\\hooks\\use-dashboard-data.ts",
      "line": 41,
      "assignee": "dev",
      "context": "\r\n  // 獲取儀表板統計數據\r\n  const fetchStats = useCallback(async (): Promise<DashboardStats> => {\r\n    // TODO: [P2] FEAT src/components/features/spaces/components/overview/hooks/use-dashboard-data.ts - 替換為實際的 API 調用\r\n    // 這裡使用模擬數據\r\n    // @assignee dev\r\n    return new Promise((resolve) => {\r\n      setTimeout(() => {\r\n        resolve({\r\n          members: Math.floor(Math.random() * 50) + 10,\r\n          files: Math.floor(Math.random() * 200) + 50,\r\n          issues: Math.floor(Math.random() * 20) + 2,\r\n          lastActivity: '2 hours ago',\r"
    },
    {
      "priority": "P2",
      "type": "FEAT",
      "description": "src/components/features/spaces/components/overview/hooks/use-dashboard-data.ts - 替換為實際的 API 調用",
      "details": [
        "這裡使用模擬數據"
      ],
      "file": "src\\components\\features\\spaces\\components\\overview\\hooks\\use-dashboard-data.ts",
      "line": 60,
      "assignee": "dev",
      "context": "\r\n  // 獲取活動數據\r\n  const fetchActivities = useCallback(async (): Promise<ActivityItem[]> => {\r\n    // TODO: [P2] FEAT src/components/features/spaces/components/overview/hooks/use-dashboard-data.ts - 替換為實際的 API 調用\r\n    // 這裡使用模擬數據\r\n    // @assignee dev\r\n    return new Promise((resolve) => {\r\n      setTimeout(() => {\r\n        const mockActivities: ActivityItem[] = [\r\n          {\r\n            id: '1',\r\n            type: 'file_upload',\r\n            user: 'John Doe',\r"
    },
    {
      "priority": "P2",
      "type": "FIX",
      "description": "src/components/features/spaces/components/overview/types.ts - 修正 unknown/any 類型（定義 metadata 結構）",
      "details": [],
      "file": "src\\components\\features\\spaces\\components\\overview\\types.ts",
      "line": 41,
      "context": "  };\r\n  description: string;\r\n  timestamp: Date;\r\n  // TODO: [P2] FIX src/components/features/spaces/components/overview/types.ts - 修正 unknown/any 類型（定義 metadata 結構）\r\n  metadata?: Record<string, unknown>;\r\n  status?: 'completed' | 'pending' | 'failed';\r\n}\r\n\r\nexport interface DashboardStats {\r\n  members: number;\r\n  files: number;\r\n  issues: number;\r\n  lastActivity: string;\r"
    },
    {
      "priority": "P2",
      "type": "FIX",
      "description": "src/components/features/spaces/components/quality/create-checklist-template.tsx - 修正 unknown/any 類型",
      "details": [
        "說明：以具名型別替代 unknown，為 template 建立明確型別介面"
      ],
      "file": "src\\components\\features\\spaces\\components\\quality\\create-checklist-template.tsx",
      "line": 33,
      "context": "  spaceId: string;\r\n  open: boolean;\r\n  onOpenChange: (open: boolean) => void;\r\n  // TODO: [P2] FIX src/components/features/spaces/components/quality/create-checklist-template.tsx - 修正 unknown/any 類型\r\n  // 說明：以具名型別替代 unknown，為 template 建立明確型別介面\r\n  onTemplateCreated?: (template: unknown) => void;\r\n}\r\n\r\nexport function CreateChecklistTemplate({\r\n  spaceId,\r\n  open,\r\n  onOpenChange,\r\n  onTemplateCreated,\r"
    },
    {
      "priority": "P2",
      "type": "FEAT",
      "description": "src/components/features/spaces/components/quality/create-checklist-template.tsx - 實現創建模板 API 調用",
      "details": [],
      "file": "src\\components\\features\\spaces\\components\\quality\\create-checklist-template.tsx",
      "line": 71,
      "context": "  const onSubmit = async (data: ChecklistTemplateFormValues) => {\r\n    setIsLoading(true);\r\n    try {\r\n      // TODO: [P2] FEAT src/components/features/spaces/components/quality/create-checklist-template.tsx - 實現創建模板 API 調用\r\n      console.log('Creating checklist template:', { spaceId, ...data });\r\n      // @assignee dev\r\n      await new Promise(resolve => setTimeout(resolve, 1000)); // Simulate API call\r\n      \r\n      const newTemplate = {\r\n        id: Date.now().toString(),\r\n        ...data,\r\n        createdAt: new Date(),\r\n        createdBy: 'current-user',\r"
    },
    {
      "priority": "P2",
      "type": "FIX",
      "description": "src/components/features/spaces/components/report/create-report-dialog.tsx - 修正 unknown/any 類型",
      "details": [
        "說明：以具名型別替代 unknown，為 report 建立明確型別介面"
      ],
      "file": "src\\components\\features\\spaces\\components\\report\\create-report-dialog.tsx",
      "line": 36,
      "context": "  spaceId: string;\r\n  open: boolean;\r\n  onOpenChange: (open: boolean) => void;\r\n  // TODO: [P2] FIX src/components/features/spaces/components/report/create-report-dialog.tsx - 修正 unknown/any 類型\r\n  // 說明：以具名型別替代 unknown，為 report 建立明確型別介面\r\n  onReportCreated?: (report: unknown) => void;\r\n}\r\n\r\nexport function CreateReportDialog({\r\n  spaceId,\r\n  open,\r\n  onOpenChange,\r\n  onReportCreated,\r"
    },
    {
      "priority": "P2",
      "type": "FEAT",
      "description": "src/components/features/spaces/components/report/create-report-dialog.tsx - 實現創建報告 API 調用",
      "details": [],
      "file": "src\\components\\features\\spaces\\components\\report\\create-report-dialog.tsx",
      "line": 70,
      "context": "  const onSubmit = async (data: CreateReportFormValues) => {\r\n    setIsLoading(true);\r\n    try {\r\n      // TODO: [P2] FEAT src/components/features/spaces/components/report/create-report-dialog.tsx - 實現創建報告 API 調用\r\n      console.log('Creating report:', { spaceId, ...data });\r\n      // @assignee dev\r\n      await new Promise(resolve => setTimeout(resolve, 2000)); // Simulate API call\r\n      \r\n      const newReport = {\r\n        id: Date.now().toString(),\r\n        ...data,\r\n        status: 'generating' as const,\r\n        createdAt: new Date(),\r"
    },
    {
      "priority": "P2",
      "type": "FEAT",
      "description": "src/components/features/spaces/components/report/report-dashboard.tsx - 實現實際下載邏輯",
      "details": [],
      "file": "src\\components\\features\\spaces\\components\\report\\report-dashboard.tsx",
      "line": 124,
      "context": "\r\n  const handleDownload = (report: Report) => {\r\n    if (report.downloadUrl) {\r\n      // TODO: [P2] FEAT src/components/features/spaces/components/report/report-dashboard.tsx - 實現實際下載邏輯\r\n      console.log('Downloading report:', report.title);\r\n      // @assignee dev\r\n      window.open(report.downloadUrl, '_blank');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"space-y-6\">\r\n      <div className=\"flex items-center justify-between\">\r"
    },
    {
      "priority": "P2",
      "type": "FEAT",
      "description": "src/components/features/spaces/components/report/report-viewer.tsx - 實現實際下載邏輯",
      "details": [],
      "file": "src\\components\\features\\spaces\\components\\report\\report-viewer.tsx",
      "line": 80,
      "context": "\r\n  const handleDownload = () => {\r\n    if (report.downloadUrl) {\r\n      // TODO: [P2] FEAT src/components/features/spaces/components/report/report-viewer.tsx - 實現實際下載邏輯\r\n      console.log('Downloading report:', report.title);\r\n      // @assignee dev\r\n      window.open(report.downloadUrl, '_blank');\r\n    }\r\n  };\r\n\r\n  // Mock report content based on type\r\n  const getReportContent = () => {\r\n    switch (report.type) {\r"
    },
    {
      "priority": "P2",
      "type": "REFACTOR",
      "description": "src/components/features/spaces/hooks/use-file-actions.ts - 奧卡姆剃刀精簡檔案動作 Hook",
      "details": [
        "建議：",
        "1) 將 fileOperations 相關依賴集中於單一 factory/context，移除多處 useCallback 依賴項導致的 hooks 警告。",
        "2) 僅回傳實際用到的最小 API（如 download/preview/delete），避免暴露整包操作以降低重渲染。",
        "3) 針對重複邏輯（權限/錯誤處理/Toast）抽為 util，避免每個 action 內重複。"
      ],
      "file": "src\\components\\features\\spaces\\hooks\\use-file-actions.ts",
      "line": 8,
      "context": " * and errors. This simplifies file management logic in the UI components.\n */\n'use client';\n// TODO: [P2] REFACTOR src/components/features/spaces/hooks/use-file-actions.ts - 奧卡姆剃刀精簡檔案動作 Hook\n// 建議：\n// 1) 將 fileOperations 相關依賴集中於單一 factory/context，移除多處 useCallback 依賴項導致的 hooks 警告。\n// 2) 僅回傳實際用到的最小 API（如 download/preview/delete），避免暴露整包操作以降低重渲染。\n// 3) 針對重複邏輯（權限/錯誤處理/Toast）抽為 util，避免每個 action 內重複。\n\nimport { useState, useCallback } from 'react';\nimport { useToast } from '@/hooks/use-toast';\nimport { useFileOperations, type FileItem as FileActionItem } from './use-file-operations';\n"
    },
    {
      "priority": "P2",
      "type": "REFACTOR",
      "description": "src/components/features/spaces/hooks/use-star-actions.ts - 清理未使用的導入（Space 未使用）",
      "details": [],
      "file": "src\\components\\features\\spaces\\hooks\\use-star-actions.ts",
      "line": 14,
      "context": "import { useToast } from '@/hooks/use-toast';\r\nimport { doc, updateDoc, arrayUnion, arrayRemove } from 'firebase/firestore';\r\nimport { type Space as _Space } from '@/lib/types-unified';\r\n// TODO: [P2] REFACTOR src/components/features/spaces/hooks/use-star-actions.ts - 清理未使用的導入（Space 未使用）\r\n\r\ninterface UseStarActionsReturn {\r\n  // Actions\r\n  starSpace: (spaceId: string, userId: string) => Promise<boolean>;\r\n  unstarSpace: (spaceId: string, userId: string) => Promise<boolean>;\r\n  toggleStar: (spaceId: string, userId: string, isStarred: boolean) => Promise<boolean>;\r\n  \r\n  // State\r\n  isLoading: boolean;\r"
    },
    {
      "priority": "P2",
      "type": "REFACTOR",
      "description": "src/components/github-heat-map.tsx:39 - 清理未使用的變數",
      "details": [
        "問題：'weekDays' 已定義但從未使用",
        "影響：增加 bundle 大小，影響性能",
        "建議：移除未使用的變數或添加下劃線前綴表示有意未使用"
      ],
      "file": "src\\components\\github-heat-map.tsx",
      "line": 41,
      "assignee": "frontend",
      "context": "\r\nconst _weekDays = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\r\n\r\n// TODO: [P2] REFACTOR src/components/github-heat-map.tsx:39 - 清理未使用的變數\r\n// 問題：'weekDays' 已定義但從未使用\r\n// 影響：增加 bundle 大小，影響性能\r\n// 建議：移除未使用的變數或添加下劃線前綴表示有意未使用\r\n// @assignee frontend-team\r\n\r\nexport const GitHubHeatMap: React.FC<HeatMapProps> = ({\r\n  data,\r\n  endDate = new Date(),\r\n  numDays = 365,\r"
    },
    {
      "priority": "P2",
      "type": "REFACTOR",
      "description": "src/components/ui/chart.tsx - 奧卡姆剃刀精簡圖表層",
      "details": [
        "建議：",
        "1) 以 props 驅動、單一責任：只渲染必要視圖，不內嵌資料轉換/來源選擇。",
        "2) 將重複的 formatter/mapper 提升為 util，避免在多圖表內重複實作。",
        "3) 禁止於渲染期間觸發副作用或資料拉取，將副作用遷至上層 hook。"
      ],
      "file": "src\\components\\ui\\chart.tsx",
      "line": 1,
      "context": "// TODO: [P2] REFACTOR src/components/ui/chart.tsx - 奧卡姆剃刀精簡圖表層\r\n// 建議：\r\n// 1) 以 props 驅動、單一責任：只渲染必要視圖，不內嵌資料轉換/來源選擇。\r\n// 2) 將重複的 formatter/mapper 提升為 util，避免在多圖表內重複實作。\r\n// 3) 禁止於渲染期間觸發副作用或資料拉取，將副作用遷至上層 hook。\r\n\"use client\"\r\n\r\nimport * as React from \"react\"\r\nimport * as RechartsPrimitive from \"recharts\"\r\n\r"
    },
    {
      "priority": "P2",
      "type": "REFACTOR",
      "description": "src/firebase/firestore/use-collection.tsx - 控制快取與依賴穩定，降低重新訂閱",
      "details": [
        "建議：",
        "- 呼叫端須 useMemo 穩定 Query/Ref，hook 內可檢查相等性避免過度 unsubscribe/subscribe。",
        "- 提供選項：{ listen?: boolean; cache?: 'no-store'|'memory' }，與 App Router 快取策略對齊。",
        "- 僅回傳必要欄位，錯誤統一由 errorEmitter 傳遞。"
      ],
      "file": "src\\firebase\\firestore\\use-collection.tsx",
      "line": 37,
      "context": " * The Firestore CollectionReference or Query. Waits if null/undefined.\n * @returns {UseCollectionResult<T>} Object with data, isLoading, error.\n */\n// TODO: [P2] REFACTOR src/firebase/firestore/use-collection.tsx - 控制快取與依賴穩定，降低重新訂閱\n// 建議：\n// - 呼叫端須 useMemo 穩定 Query/Ref，hook 內可檢查相等性避免過度 unsubscribe/subscribe。\n// - 提供選項：{ listen?: boolean; cache?: 'no-store'|'memory' }，與 App Router 快取策略對齊。\n// - 僅回傳必要欄位，錯誤統一由 errorEmitter 傳遞。\nexport function useCollection<T = DocumentData>(\n    targetRefOrQuery: CollectionReference<DocumentData> | Query<DocumentData> | null | undefined,\n): UseCollectionResult<T> {\n  type ResultItemType = WithId<T>;\n  type StateDataType = ResultItemType[] | null;"
    },
    {
      "priority": "P2",
      "type": "FIX",
      "description": "src/hooks/use-app-state.ts - 修正 unknown/any 類型",
      "details": [
        "說明：以具名型別替代 unknown，為 dialog data 建立明確型別"
      ],
      "file": "src\\hooks\\use-app-state.ts",
      "line": 12,
      "context": "\r\ninterface DialogState {\r\n  type: string | null;\r\n  // TODO: [P2] FIX src/hooks/use-app-state.ts - 修正 unknown/any 類型\r\n  // 說明：以具名型別替代 unknown，為 dialog data 建立明確型別\r\n  data: unknown;\r\n  isOpen: boolean;\r\n}\r\n\r\ninterface AppState {\r\n  chat: ChatState;\r\n  dialog: DialogState;\r\n}\r"
    },
    {
      "priority": "P2",
      "type": "FIX",
      "description": "src/hooks/use-app-state.ts - 修正 unknown/any 類型",
      "details": [
        "說明：替換為具名型別或泛型參數，避免使用 unknown"
      ],
      "file": "src\\hooks\\use-app-state.ts",
      "line": 28,
      "context": "  closeChat: () => void;\r\n  toggleChat: () => void;\r\n  toggleMinimizeChat: () => void;\r\n  // TODO: [P2] FIX src/hooks/use-app-state.ts - 修正 unknown/any 類型\r\n  // 說明：替換為具名型別或泛型參數，避免使用 unknown\r\n  openDialog: (type: string, data?: unknown) => void;\r\n  closeDialog: () => void;\r\n}\r\n\r\ninterface AppStateContext extends AppState, AppStateActions {}\r\n\r\nconst AppStateContext = createContext<AppStateContext | undefined>(undefined);\r\n\r"
    },
    {
      "priority": "P2",
      "type": "FIX",
      "description": "src/hooks/use-app-state.ts - 修正 unknown/any 類型",
      "details": [
        "說明：為 data 提供具名型別或受限泛型，避免使用 unknown"
      ],
      "file": "src\\hooks\\use-app-state.ts",
      "line": 74,
      "context": "    setChat(prev => ({ ...prev, isMinimized: !prev.isMinimized }));\r\n  }, []);\r\n\r\n  // TODO: [P2] FIX src/hooks/use-app-state.ts - 修正 unknown/any 類型\r\n  // 說明：為 data 提供具名型別或受限泛型，避免使用 unknown\r\n  const openDialog = useCallback((type: string, data: unknown = {}) => {\r\n    setDialog({ type, data, isOpen: true });\r\n  }, []);\r\n\r\n  const closeDialog = useCallback(() => {\r\n    setDialog({ type: null, data: {}, isOpen: false });\r\n  }, []);\r\n\r"
    },
    {
      "priority": "P2",
      "type": "REFACTOR",
      "description": "src/hooks/use-permissions.ts - 奧卡姆剃刀精簡權限 Hook",
      "details": [
        "建議：",
        "1) 將 checkOrganizationPermissionInternal 暴露為單一 memoized selector，避免多處 useCallback 依賴分散。",
        "2) 僅回傳呼叫端實際需要的最小資料（布林/字串），降低重渲染與心智負擔。",
        "3) 以穩定依賴陣列與衍生值 memo 化，移除多餘依賴導致的 hooks 警告。"
      ],
      "file": "src\\hooks\\use-permissions.ts",
      "line": 2,
      "context": "'use client';\r\n// TODO: [P2] REFACTOR src/hooks/use-permissions.ts - 奧卡姆剃刀精簡權限 Hook\r\n// 建議：\r\n// 1) 將 checkOrganizationPermissionInternal 暴露為單一 memoized selector，避免多處 useCallback 依賴分散。\r\n// 2) 僅回傳呼叫端實際需要的最小資料（布林/字串），降低重渲染與心智負擔。\r\n// 3) 以穩定依賴陣列與衍生值 memo 化，移除多餘依賴導致的 hooks 警告。\r\n\r\nimport { useState, useCallback, useMemo } from 'react';\r\nimport { Permission, PermissionCheckResult, UserRoleAssignment } from '@/lib/types-unified';\r\nimport { useAuth } from '@/components/auth/auth-provider';\r\nimport { roleManagementService } from '@/lib/role-management';\r"
    },
    {
      "priority": "P2",
      "type": "REFACTOR",
      "description": "src/lib/role-management.ts - 合併查詢與快取，僅回傳最小資料",
      "details": [
        "指南：",
        "- 提供 in-memory 快取（弱映射）以減少 getRoleDefinition 重複查詢；",
        "- checkPermission 與 getAllRoleDefinitions 共享快取；",
        "- 僅暴露 id/name/permissions；將非必要欄位延後查詢。"
      ],
      "file": "src\\lib\\role-management.ts",
      "line": 112,
      "assignee": "ai",
      "context": "  },\n};\n\n// TODO: [P2] REFACTOR src/lib/role-management.ts - 合併查詢與快取，僅回傳最小資料\n// 指南：\n// - 提供 in-memory 快取（弱映射）以減少 getRoleDefinition 重複查詢；\n// - checkPermission 與 getAllRoleDefinitions 共享快取；\n// - 僅暴露 id/name/permissions；將非必要欄位延後查詢。\n// @assignee ai\nexport const roleManagementService = {\n  // 初始化 Firestore\n  db: getFirestore(initializeFirebase().firebaseApp),\n  // TODO: [P2] REFACTOR src/lib/role-management.ts - 奧卡姆剃刀精簡服務層"
    },
    {
      "priority": "P2",
      "type": "REFACTOR",
      "description": "src/lib/role-management.ts - 奧卡姆剃刀精簡服務層",
      "details": [
        "建議：",
        "1) 以 pure function + 最小輸出為主，避免在 service 層維持隱藏狀態。",
        "2) 將 getAllRoleDefinitions 與 checkPermission 的重複查詢合併/快取；避免重複 Firestore round-trip。",
        "3) 僅回傳渲染所需欄位（id/name/permissions），其餘細節延後查詢。"
      ],
      "file": "src\\lib\\role-management.ts",
      "line": 121,
      "context": "export const roleManagementService = {\n  // 初始化 Firestore\n  db: getFirestore(initializeFirebase().firebaseApp),\n  // TODO: [P2] REFACTOR src/lib/role-management.ts - 奧卡姆剃刀精簡服務層\n  // 建議：\n  // 1) 以 pure function + 最小輸出為主，避免在 service 層維持隱藏狀態。\n  // 2) 將 getAllRoleDefinitions 與 checkPermission 的重複查詢合併/快取；避免重複 Firestore round-trip。\n  // 3) 僅回傳渲染所需欄位（id/name/permissions），其餘細節延後查詢。\n\n  // 獲取角色定義\n  getRoleDefinition: async (roleId: string): Promise<RoleDefinition | null> => {\n    try {\n      // 首先檢查系統角色"
    },
    {
      "priority": "P2",
      "type": "FIX",
      "description": "src/lib/types-unified.ts - 修正 unknown/any 類型",
      "details": [
        "說明：以具名型別替代 unknown，或引入泛型以約束資料型別"
      ],
      "file": "src\\lib\\types-unified.ts",
      "line": 245,
      "context": "  };\r\n  dialog: {\r\n    type: string | null;\r\n    // TODO: [P2] FIX src/lib/types-unified.ts - 修正 unknown/any 類型\r\n    // 說明：以具名型別替代 unknown，或引入泛型以約束資料型別\r\n    data: unknown;\r\n    isOpen: boolean;\r\n  };\r\n}\r\n\r\nexport interface AuthState {\r\n  userId: string | null;\r\n  userRoleAssignment: UserRoleAssignment | null;\r"
    },
    {
      "priority": "P3",
      "type": "REFACTOR",
      "description": "src/components/features/spaces/components/quality/quality-dashboard.tsx - 清理未使用的參數（spaceId 未使用）",
      "details": [],
      "file": "src\\components\\features\\spaces\\components\\quality\\quality-dashboard.tsx",
      "line": 28,
      "context": "}\r\n\r\nexport function QualityDashboard({ spaceId: _spaceId, metrics }: QualityDashboardProps) {\r\n  // TODO: [P3] REFACTOR src/components/features/spaces/components/quality/quality-dashboard.tsx - 清理未使用的參數（spaceId 未使用）\r\n  const defaultMetrics: QualityMetrics = {\r\n    overallScore: 85,\r\n    completedChecks: 12,\r\n    totalChecks: 15,\r\n    criticalIssues: 2,\r\n    warnings: 5,\r\n    trends: {\r\n      scoreChange: 5,\r\n      completionRate: 80,\r"
    },
    {
      "priority": "P3",
      "type": "REFACTOR",
      "description": "src/components/ui/menubar.tsx - 奧卡姆剃刀精簡 API 表面",
      "details": [
        "建議：",
        "1) 僅導出常用組件（Menubar, Trigger, Content, Item, Separator），其餘用到再暴露，降低 API 心智負擔。",
        "2) 以範例/Story 取代過度封裝，鼓勵組合而非新增包裝層。"
      ],
      "file": "src\\components\\ui\\menubar.tsx",
      "line": 8,
      "context": "import { Check, ChevronRight, Circle } from \"lucide-react\"\r\n\r\nimport { cn } from \"@/lib/utils\"\r\n// TODO: [P3] REFACTOR src/components/ui/menubar.tsx - 奧卡姆剃刀精簡 API 表面\r\n// 建議：\r\n// 1) 僅導出常用組件（Menubar, Trigger, Content, Item, Separator），其餘用到再暴露，降低 API 心智負擔。\r\n// 2) 以範例/Story 取代過度封裝，鼓勵組合而非新增包裝層。\r\n\r\nfunction MenubarMenu({\r\n  ...props\r\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\r\n  return <MenubarPrimitive.Menu {...props} />\r\n}\r"
    }
  ],
  "aiInstructions": "# AI Agent 工作指令\n## 📊 專案狀態\n- 總 TODO 數量: 81\n- 🔴 緊急項目: 12\n## ⚠️ 立即處理（P0 或已過期）\n### 1. REFACTOR: src/components/features/spaces/components/ - 減少過度抽象的組件層級\n- 檔案: `src\\components\\features\\spaces\\components\\index.ts:7`\n- 優先級: P1\n- ⏰ 截止日期: 2025-01-20\n- 負責人: @frontend\n**詳細說明:**\n- 問題：70 個文件過度拆分，造成不必要的複雜性\n- 影響：導入路徑過長、維護成本高、認知負擔重\n- 建議：\n- 1) 合併功能相似的組件（如多個 list 組件）\n- 2) 簡化目錄結構，減少嵌套層級\n- 3) 移除不必要的 barrel exports\n- 4) 遵循 Next.js 15 組件組合模式\n**程式碼上下文:**\n```typescript\n * by providing a single, consistent path.\r\n */\r\n\r\n// TODO: [P1] REFACTOR src/components/features/spaces/components/ - 減少過度抽象的組件層級\r\n// 問題：70 個文件過度拆分，造成不必要的複雜性\r\n// 影響：導入路徑過長、維護成本高、認知負擔重\r\n// 建議：\r\n// 1) 合併功能相似的組件（如多個 list 組件）\r\n// 2) 簡化目錄結構，減少嵌套層級\r\n// 3) 移除不必要的 barrel exports\r\n// 4) 遵循 Next.js 15 組件組合模式\r\n// @assignee frontend-team\r\n// @deadline 2025-01-20\r\n```\n### 2. REFACTOR: src/components/adjust-stock-dialog.tsx:133 - 修復非空斷言警告\n- 檔案: `src\\components\\adjust-stock-dialog.tsx:129`\n- 優先級: P2\n- ⏰ 截止日期: 2025-01-25\n- 負責人: @frontend\n**詳細說明:**\n- 問題：使用非空斷言 (!) 可能導致運行時錯誤\n- 影響：類型安全問題，可能導致應用崩潰\n- 建議：添加適當的類型檢查或使用可選鏈操作符\n**程式碼上下文:**\n```typescript\n          let stockDocRef;\r\n\r\n  if (hasExistingStockRecord && stockInfo.stockId) {\r\n              // TODO: [P2] REFACTOR src/components/adjust-stock-dialog.tsx:133 - 修復非空斷言警告\r\n              // 問題：使用非空斷言 (!) 可能導致運行時錯誤\r\n              // 影響：類型安全問題，可能導致應用崩潰\r\n              // 建議：添加適當的類型檢查或使用可選鏈操作符\r\n              // @assignee frontend-team\r\n              // @deadline 2025-01-25\r\n              stockDocRef = doc(firestore, 'accounts', organizationId, 'warehouses', warehouseId, 'stock', stockInfo.stockId);\r\n              batch.update(stockDocRef, { quantity: increment(adjustment) });\r\n          } else {\r\n              // Create a new stock document\r\n```\n### 3. REFACTOR: src/components/auth/auth-provider.tsx:195 - 修復 TypeScript any 類型使用\n- 檔案: `src\\components\\auth\\auth-provider.tsx:197`\n- 優先級: P2\n- ⏰ 截止日期: 2025-01-25\n- 負責人: @frontend\n**詳細說明:**\n- 問題：使用 any 類型違反類型安全原則\n- 影響：失去類型檢查，可能導致運行時錯誤\n- 建議：定義具體的類型接口替代 any 類型\n**程式碼上下文:**\n```typescript\n      const spaceRoles: Record<string, SpaceRoleAssignment> = {};\n      \n      spaceRolesSnapshot.forEach(d => {\n        // TODO: [P2] REFACTOR src/components/auth/auth-provider.tsx:195 - 修復 TypeScript any 類型使用\n        // 問題：使用 any 類型違反類型安全原則\n        // 影響：失去類型檢查，可能導致運行時錯誤\n        // 建議：定義具體的類型接口替代 any 類型\n        // @assignee frontend-team\n        // @deadline 2025-01-25\n        const raw = d.data() as Record<string, unknown>;\n        const assignedAtRaw = raw.assignedAt as unknown;\n        // TODO: 現代化 - 使用類型守衛替代 any，提升類型安全\n        const assignedAtTs: Timestamp = isFirestoreTimestamp(assignedAtRaw)\n```\n### 4. REFACTOR: src/components/features/spaces/components/file-explorer/file-explorer.tsx:341 - 修復 TypeScript any 類型使用\n- 檔案: `src\\components\\features\\spaces\\components\\file-explorer\\file-explorer.tsx:342`\n- 優先級: P2\n- ⏰ 截止日期: 2025-01-25\n- 負責人: @frontend\n**詳細說明:**\n- 問題：使用 any 類型違反類型安全原則\n- 影響：失去類型檢查，可能導致運行時錯誤\n- 建議：定義具體的類型接口替代 any 類型\n**程式碼上下文:**\n```typescript\n  };\r\n\r\n  const handleRestoreItem = (item: FileItem) => {\r\n    // TODO: [P2] REFACTOR src/components/features/spaces/components/file-explorer/file-explorer.tsx:341 - 修復 TypeScript any 類型使用\r\n    // 問題：使用 any 類型違反類型安全原則\r\n    // 影響：失去類型檢查，可能導致運行時錯誤\r\n    // 建議：定義具體的類型接口替代 any 類型\r\n    // @assignee frontend-team\r\n    // @deadline 2025-01-25\r\n    console.log('Restore item:', item);\r\n  };\r\n\r\n  const handlePermanentDelete = (item: FileItem) => {\r\n```\n### 5. REFACTOR: src/components/features/spaces/components/file-explorer/file-explorer.tsx:346 - 修復 TypeScript any 類型使用\n- 檔案: `src\\components\\features\\spaces\\components\\file-explorer\\file-explorer.tsx:352`\n- 優先級: P2\n- ⏰ 截止日期: 2025-01-25\n- 負責人: @frontend\n**詳細說明:**\n- 問題：使用 any 類型違反類型安全原則\n- 影響：失去類型檢查，可能導致運行時錯誤\n- 建議：定義具體的類型接口替代 any 類型\n**程式碼上下文:**\n```typescript\n  };\r\n\r\n  const handlePermanentDelete = (item: FileItem) => {\r\n    // TODO: [P2] REFACTOR src/components/features/spaces/components/file-explorer/file-explorer.tsx:346 - 修復 TypeScript any 類型使用\r\n    // 問題：使用 any 類型違反類型安全原則\r\n    // 影響：失去類型檢查，可能導致運行時錯誤\r\n    // 建議：定義具體的類型接口替代 any 類型\r\n    // @assignee frontend-team\r\n    // @deadline 2025-01-25\r\n    console.log('Permanent delete item:', item);\r\n  };\r\n\r\n  return (\r\n```\n### 6. REFACTOR: src/components/features/spaces/components/file-explorer/services/file-preview-service.ts:52 - 修復 TypeScript any 類型使用\n- 檔案: `src\\components\\features\\spaces\\components\\file-explorer\\services\\file-preview-service.ts:66`\n- 優先級: P2\n- ⏰ 截止日期: 2025-01-25\n- 負責人: @frontend\n**詳細說明:**\n- 問題：使用 any 類型違反類型安全原則\n- 影響：失去類型檢查，可能導致運行時錯誤\n- 建議：定義具體的類型接口替代 any 類型\n**程式碼上下文:**\n```typescript\n  abstract canPreview(file: FileItem): boolean;\r\n  abstract getPreviewConfig(file: FileItem): PreviewConfig;\r\n  abstract toPreviewDocument(file: FileItem): PreviewDocument;\r\n  // TODO: [P2] REFACTOR src/components/features/spaces/components/file-explorer/services/file-preview-service.ts:52 - 修復 TypeScript any 類型使用\r\n  // 問題：使用 any 類型違反類型安全原則\r\n  // 影響：失去類型檢查，可能導致運行時錯誤\r\n  // 建議：定義具體的類型接口替代 any 類型\r\n  // @assignee frontend-team\r\n  // @deadline 2025-01-25\r\n  abstract handleError(error: unknown): PreviewError;\r\n\r\n  getSupportedTypes(): string[] {\r\n    return this.supportedTypes;\r\n```\n### 7. REFACTOR: src/components/features/spaces/components/file-explorer/services/file-preview-service.ts:223 - 修復 TypeScript any 類型使用\n- 檔案: `src\\components\\features\\spaces\\components\\file-explorer\\services\\file-preview-service.ts:210`\n- 優先級: P2\n- ⏰ 截止日期: 2025-01-25\n- 負責人: @frontend\n**詳細說明:**\n- 問題：使用 any 類型違反類型安全原則\n- 影響：失去類型檢查，可能導致運行時錯誤\n- 建議：定義具體的錯誤類型接口替代 any 類型\n**程式碼上下文:**\n```typescript\n    };\r\n  }\r\n\r\n  // TODO: [P2] REFACTOR src/components/features/spaces/components/file-explorer/services/file-preview-service.ts:223 - 修復 TypeScript any 類型使用\r\n  // 問題：使用 any 類型違反類型安全原則\r\n  // 影響：失去類型檢查，可能導致運行時錯誤\r\n  // 建議：定義具體的錯誤類型接口替代 any 類型\r\n  // @assignee frontend-team\r\n  // @deadline 2025-01-25\r\n  handleError(error: Error | unknown): PreviewError {\r\n    // TODO: 現代化 - 使用類型守衛處理 unknown 類型，提升類型安全\r\n    const errorObj = error as Error & { code?: string };\r\n    \r\n```\n### 8. REFACTOR: src/components/features/spaces/components/file-explorer/services/file-preview-service.ts:28 - 修復 TypeScript any 類型使用\n- 檔案: `src\\components\\features\\spaces\\components\\file-explorer\\services\\file-preview-service.ts:240`\n- 優先級: P2\n- ⏰ 截止日期: 2025-01-25\n- 負責人: @frontend\n**詳細說明:**\n- 問題：使用 any 類型違反類型安全原則\n- 影響：失去類型檢查，可能導致運行時錯誤\n- 建議：定義具體的類型接口替代 any 類型\n**程式碼上下文:**\n```typescript\n    if (errorObj.message?.includes('403')) {\r\n      return {\r\n        code: 'ACCESS_DENIED',\r\n        // TODO: [P2] REFACTOR src/components/features/spaces/components/file-explorer/services/file-preview-service.ts:28 - 修復 TypeScript any 類型使用\r\n        // 問題：使用 any 類型違反類型安全原則\r\n        // 影響：失去類型檢查，可能導致運行時錯誤\r\n        // 建議：定義具體的類型接口替代 any 類型\r\n        // @assignee frontend-team\r\n        // @deadline 2025-01-25\r\n        message: '沒有權限存取此檔案',\r\n        details: error,\r\n      };\r\n    }\r\n```\n### 9. REFACTOR: src/components/features/spaces/components/file-explorer/services/file-preview-service.ts:50 - 修復 TypeScript any 類型使用\n- 檔案: `src\\components\\features\\spaces\\components\\file-explorer\\services\\file-preview-service.ts:261`\n- 優先級: P2\n- ⏰ 截止日期: 2025-01-25\n- 負責人: @frontend\n**詳細說明:**\n- 問題：使用 any 類型違反類型安全原則\n- 影響：失去類型檢查，可能導致運行時錯誤\n- 建議：定義具體的類型接口替代 any 類型\n**程式碼上下文:**\n```typescript\n\r\n    return {\r\n      code: 'UNKNOWN_ERROR',\r\n      // TODO: [P2] REFACTOR src/components/features/spaces/components/file-explorer/services/file-preview-service.ts:50 - 修復 TypeScript any 類型使用\r\n      // 問題：使用 any 類型違反類型安全原則\r\n      // 影響：失去類型檢查，可能導致運行時錯誤\r\n      // 建議：定義具體的類型接口替代 any 類型\r\n      // @assignee frontend-team\r\n      // @deadline 2025-01-25\r\n      message: '預覽檔案發生未預期錯誤',\r\n      details: error,\r\n    };\r\n  }\r\n```\n### 10. REFACTOR: src/components/features/spaces/components/ - 合併重複的組件邏輯\n- 檔案: `src\\components\\features\\spaces\\components\\index.ts:18`\n- 優先級: P2\n- ⏰ 截止日期: 2025-01-30\n- 負責人: @frontend\n**詳細說明:**\n- 問題：多個 list/card/dialog 組件存在重複邏輯\n- 影響：代碼重複、維護困難、一致性問題\n- 建議：\n- 1) 創建通用的 List/Card/Dialog 基礎組件\n- 2) 使用 TypeScript 泛型提高類型安全\n- 3) 實現組合模式而非繼承\n- 4) 遵循 DRY 原則和奧卡姆剃刀\n- Spaces feature components exports\n**程式碼上下文:**\n```typescript\n// @assignee frontend-team\r\n// @deadline 2025-01-20\r\n\r\n// TODO: [P2] REFACTOR src/components/features/spaces/components/ - 合併重複的組件邏輯\r\n// 問題：多個 list/card/dialog 組件存在重複邏輯\r\n// 影響：代碼重複、維護困難、一致性問題\r\n// 建議：\r\n// 1) 創建通用的 List/Card/Dialog 基礎組件\r\n// 2) 使用 TypeScript 泛型提高類型安全\r\n// 3) 實現組合模式而非繼承\r\n// 4) 遵循 DRY 原則和奧卡姆剃刀\r\n// @assignee frontend-team\r\n// @deadline 2025-01-30\r\n```\n### 11. PERF: next.config.ts - 實現 Next.js 15 性能優化配置\n- 檔案: `next.config.ts:16`\n- 優先級: P2\n- ⏰ 截止日期: 2025-02-01\n- 負責人: @performance\n**詳細說明:**\n- 問題：未充分利用 Next.js 15 的性能優化特性\n- 影響：圖片載入性能差、bundle 大小過大\n- 建議：\n- 1) 啟用 optimizePackageImports 減少 bundle 大小\n- 2) 配置 bundlePagesRouterDependencies 優化依賴打包\n- 3) 添加 experimental.turbo 配置提升開發體驗\n- 4) 配置適當的圖片優化參數\n**程式碼上下文:**\n```typescript\n    esmExternals: true,\n  },\n  \n  // TODO: [P2] PERF next.config.ts - 實現 Next.js 15 性能優化配置\n  // 問題：未充分利用 Next.js 15 的性能優化特性\n  // 影響：圖片載入性能差、bundle 大小過大\n  // 建議：\n  // 1) 啟用 optimizePackageImports 減少 bundle 大小\n  // 2) 配置 bundlePagesRouterDependencies 優化依賴打包\n  // 3) 添加 experimental.turbo 配置提升開發體驗\n  // 4) 配置適當的圖片優化參數\n  // @assignee performance-team\n  // @deadline 2025-02-01\n```\n### 12. REFACTOR: src/components/features/spaces/hooks/ - 簡化 hooks 邏輯\n- 檔案: `src\\components\\features\\spaces\\hooks\\index.ts:7`\n- 優先級: P2\n- ⏰ 截止日期: 2025-02-05\n- 負責人: @frontend\n**詳細說明:**\n- 問題：多個 hooks 文件可能包含重複邏輯\n- 影響：代碼重複、狀態管理複雜\n- 建議：\n- 1) 合併相似的 hooks 邏輯\n- 2) 使用 React 19 的新 hooks 特性\n- 3) 實現更簡單的狀態管理模式\n- 4) 減少不必要的 useEffect 使用\n- Spaces feature hooks exports\n**程式碼上下文:**\n```typescript\n * hooks, such as those for handling actions, into other components.\r\n */\r\n\r\n// TODO: [P2] REFACTOR src/components/features/spaces/hooks/ - 簡化 hooks 邏輯\r\n// 問題：多個 hooks 文件可能包含重複邏輯\r\n// 影響：代碼重複、狀態管理複雜\r\n// 建議：\r\n// 1) 合併相似的 hooks 邏輯\r\n// 2) 使用 React 19 的新 hooks 特性\r\n// 3) 實現更簡單的狀態管理模式\r\n// 4) 減少不必要的 useEffect 使用\r\n// @assignee frontend-team\r\n// @deadline 2025-02-05\r\n```\n## 📋 建議處理順序\n依照以下順序處理 TODO：\n1. P0 - SECURITY（安全性問題）\n2. P0 - FIX（緊急修復）\n3. P1 - SECURITY\n4. P1 - FIX\n5. P1 - FEAT（重要功能）\n6. P2 項目\n7. P3 項目"
}