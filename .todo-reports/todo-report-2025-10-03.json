{
  "summary": {
    "total": 35,
    "byPriority": {
      "P2": 24,
      "P1": 11
    },
    "byType": {
      "FIX": 1,
      "FEAT": 34
    },
    "urgent": 0
  },
  "todos": [
    {
      "priority": "P1",
      "type": "FEAT",
      "description": "src/components/auth/auth-provider.tsx - 從伺服器獲取用戶角色分配",
      "details": [
        "const roleAssignment = await fetchUserRoleAssignment(state.userId);",
        "setState(prev => ({ ...prev, userRoleAssignment: roleAssignment }));"
      ],
      "file": "src\\components\\auth\\auth-provider.tsx",
      "line": 139,
      "assignee": "dev",
      "context": "    setState(prev => ({ ...prev, isLoading: true, error: null }));\r\n\r\n    try {\r\n      // TODO: [P1] FEAT src/components/auth/auth-provider.tsx - 從伺服器獲取用戶角色分配\r\n      // const roleAssignment = await fetchUserRoleAssignment(state.userId);\r\n      // setState(prev => ({ ...prev, userRoleAssignment: roleAssignment }));\r\n      // @assignee dev\r\n    } catch (error) {\r\n      setState(prev => ({ \r\n        ...prev, \r\n        error: error instanceof Error ? error.message : 'Failed to refresh permissions' \r\n      }));\r\n    } finally {\r"
    },
    {
      "priority": "P1",
      "type": "FEAT",
      "description": "src/components/auth/permission-guard.tsx - 實現權限檢查邏輯",
      "details": [
        "需要根據用戶權限決定是否顯示子組件"
      ],
      "file": "src\\components\\auth\\permission-guard.tsx",
      "line": 18,
      "assignee": "dev",
      "context": "  children, \n  fallback = null \n}: PermissionGuardProps) {\n  // TODO: [P1] FEAT src/components/auth/permission-guard.tsx - 實現權限檢查邏輯\n  // 需要根據用戶權限決定是否顯示子組件\n  // @assignee dev\n  return <>{children}</>;\n}"
    },
    {
      "priority": "P1",
      "type": "FEAT",
      "description": "src/components/auth/role-manager.tsx - 實現實際的 API 調用",
      "details": [
        "const rolesData = await fetchRoles(spaceId);",
        "setRoles(rolesData);"
      ],
      "file": "src\\components\\auth\\role-manager.tsx",
      "line": 97,
      "assignee": "dev",
      "context": "  const loadRoles = async () => {\n    setLoading(true);\n    try {\n      // TODO: [P1] FEAT src/components/auth/role-manager.tsx - 實現實際的 API 調用\n      // const rolesData = await fetchRoles(spaceId);\n      // setRoles(rolesData);\n      // @assignee dev\n      \n      // Mock data for now\n      setRoles([\n        {\n          id: 'admin',\n          name: 'Administrator',"
    },
    {
      "priority": "P1",
      "type": "FEAT",
      "description": "src/components/auth/role-manager.tsx - 實現實際的 API 調用",
      "details": [
        "const usersData = await fetchUsers(spaceId);",
        "setUsers(usersData);"
      ],
      "file": "src\\components\\auth\\role-manager.tsx",
      "line": 141,
      "assignee": "dev",
      "context": "\n  const loadUsers = async () => {\n    try {\n      // TODO: [P1] FEAT src/components/auth/role-manager.tsx - 實現實際的 API 調用\n      // const usersData = await fetchUsers(spaceId);\n      // setUsers(usersData);\n      // @assignee dev\n      \n      // Mock data for now\n      setUsers([\n        {\n          id: 'user1',\n          name: 'John Doe',"
    },
    {
      "priority": "P1",
      "type": "FEAT",
      "description": "src/components/auth/role-manager.tsx - 實現實際的 API 調用",
      "details": [
        "const newRole = await createRole(spaceId, roleData);",
        "setRoles(prev => [...prev, newRole]);"
      ],
      "file": "src\\components\\auth\\role-manager.tsx",
      "line": 168,
      "assignee": "dev",
      "context": "\n  const handleCreateRole = async (roleData: Omit<Role, 'id' | 'createdAt' | 'updatedAt'>) => {\n    try {\n      // TODO: [P1] FEAT src/components/auth/role-manager.tsx - 實現實際的 API 調用\n      // const newRole = await createRole(spaceId, roleData);\n      // setRoles(prev => [...prev, newRole]);\n      // @assignee dev\n      \n      console.log('Creating role:', roleData);\n      setIsCreateDialogOpen(false);\n    } catch (error) {\n      console.error('Failed to create role:', error);\n    }"
    },
    {
      "priority": "P1",
      "type": "FEAT",
      "description": "src/components/auth/role-manager.tsx - 實現實際的 API 調用",
      "details": [
        "const updatedRole = await updateRole(spaceId, roleId, roleData);",
        "setRoles(prev => prev.map(role => role.id === roleId ? updatedRole : role));"
      ],
      "file": "src\\components\\auth\\role-manager.tsx",
      "line": 182,
      "assignee": "dev",
      "context": "\n  const handleUpdateRole = async (roleId: string, roleData: Partial<Role>) => {\n    try {\n      // TODO: [P1] FEAT src/components/auth/role-manager.tsx - 實現實際的 API 調用\n      // const updatedRole = await updateRole(spaceId, roleId, roleData);\n      // setRoles(prev => prev.map(role => role.id === roleId ? updatedRole : role));\n      // @assignee dev\n      \n      console.log('Updating role:', roleId, roleData);\n      setIsEditDialogOpen(false);\n      setSelectedRole(null);\n    } catch (error) {\n      console.error('Failed to update role:', error);"
    },
    {
      "priority": "P1",
      "type": "FEAT",
      "description": "src/components/auth/role-manager.tsx - 實現實際的 API 調用",
      "details": [
        "await deleteRole(spaceId, roleId);",
        "setRoles(prev => prev.filter(role => role.id !== roleId));"
      ],
      "file": "src\\components\\auth\\role-manager.tsx",
      "line": 197,
      "assignee": "dev",
      "context": "\n  const handleDeleteRole = async (roleId: string) => {\n    try {\n      // TODO: [P1] FEAT src/components/auth/role-manager.tsx - 實現實際的 API 調用\n      // await deleteRole(spaceId, roleId);\n      // setRoles(prev => prev.filter(role => role.id !== roleId));\n      // @assignee dev\n      \n      console.log('Deleting role:', roleId);\n    } catch (error) {\n      console.error('Failed to delete role:', error);\n    }\n  };"
    },
    {
      "priority": "P1",
      "type": "FEAT",
      "description": "src/components/auth/role-manager.tsx - 實現實際的 API 調用",
      "details": [
        "await assignRole(spaceId, userId, roleId);",
        "loadUsers(); // Reload users to reflect changes"
      ],
      "file": "src\\components\\auth\\role-manager.tsx",
      "line": 210,
      "assignee": "dev",
      "context": "\n  const handleAssignRole = async (userId: string, roleId: string) => {\n    try {\n      // TODO: [P1] FEAT src/components/auth/role-manager.tsx - 實現實際的 API 調用\n      // await assignRole(spaceId, userId, roleId);\n      // loadUsers(); // Reload users to reflect changes\n      // @assignee dev\n      \n      console.log('Assigning role:', userId, roleId);\n      setIsAssignDialogOpen(false);\n    } catch (error) {\n      console.error('Failed to assign role:', error);\n    }"
    },
    {
      "priority": "P1",
      "type": "FEAT",
      "description": "src/components/features/contracts/contract-list.tsx - 整合 React Query hooks 和 Server Actions",
      "details": [],
      "file": "src\\components\\features\\contracts\\contract-list.tsx",
      "line": 36,
      "context": "  const [filters, setFilters] = useState<ContractFilters>({});\r\n  const [searchTerm, setSearchTerm] = useState('');\r\n\r\n  // TODO: [P1] FEAT src/components/features/contracts/contract-list.tsx - 整合 React Query hooks 和 Server Actions\r\n  const contracts: Contract[] = [];\r\n  const isLoading = false;\r\n  // @assignee dev\r\n  const error = null;\r\n\r\n  // 處理搜索\r\n  const handleSearch = (term: string) => {\r\n    setSearchTerm(term);\r\n    setFilters(prev => ({ ...prev, search: term }));\r"
    },
    {
      "priority": "P1",
      "type": "FEAT",
      "description": "src/hooks/use-permissions.ts - 實現實際的權限檢查邏輯",
      "details": [
        "這裡應該調用 Firebase 或 API 來檢查權限"
      ],
      "file": "src\\hooks\\use-permissions.ts",
      "line": 23,
      "assignee": "dev",
      "context": "    setError(null);\r\n\r\n    try {\r\n      // TODO: [P1] FEAT src/hooks/use-permissions.ts - 實現實際的權限檢查邏輯\r\n      // 這裡應該調用 Firebase 或 API 來檢查權限\r\n      // @assignee dev\r\n      \r\n      // 模擬 API 調用\r\n      await new Promise(resolve => setTimeout(resolve, 100));\r\n      \r\n      // 暫時返回默認結果\r\n      return {\r\n        hasPermission: false,\r"
    },
    {
      "priority": "P1",
      "type": "FEAT",
      "description": "src/lib/role-management.ts - 實作權限檢查邏輯",
      "details": [
        "需要根據用戶角色和權限配置進行檢查"
      ],
      "file": "src\\lib\\role-management.ts",
      "line": 21,
      "assignee": "dev",
      "context": "    return null;\n  },\n  checkPermission: async (_userId: string, _spaceId: string, _permission: Permission, _userRoleAssignment: unknown) => {\n    // TODO: [P1] FEAT src/lib/role-management.ts - 實作權限檢查邏輯\n    // 需要根據用戶角色和權限配置進行檢查\n    // @assignee dev\n    return {\n      hasPermission: false,\n      reason: 'not_implemented',\n      source: 'space',\n      roleId: undefined,\n    };\n  }"
    },
    {
      "priority": "P2",
      "type": "FIX",
      "description": "src/components/adjust-stock-dialog.tsx - 修復非空斷言警告",
      "details": [
        "應該先檢查 stockInfo.stockId 是否存在"
      ],
      "file": "src\\components\\adjust-stock-dialog.tsx",
      "line": 131,
      "assignee": "dev",
      "context": "          let stockDocRef;\r\n\r\n          if (hasExistingStockRecord) {\r\n              // TODO: [P2] FIX src/components/adjust-stock-dialog.tsx - 修復非空斷言警告\r\n              // 應該先檢查 stockInfo.stockId 是否存在\r\n              // @assignee dev\r\n              stockDocRef = doc(firestore, 'accounts', organizationId, 'warehouses', warehouseId, 'stock', stockInfo.stockId!);\r\n              batch.update(stockDocRef, { quantity: increment(adjustment) });\r\n          } else {\r\n              // Create a new stock document\r\n              stockDocRef = doc(collection(firestore, 'accounts', organizationId, 'warehouses', warehouseId, 'stock'));\r\n              const newStockData: Partial<Stock> = {\r\n                  itemId: item.id,\r"
    },
    {
      "priority": "P2",
      "type": "FEAT",
      "description": "src/components/features/contracts/contract-list.tsx - 實現刪除邏輯",
      "details": [],
      "file": "src\\components\\features\\contracts\\contract-list.tsx",
      "line": 62,
      "context": "  // 處理合約操作\r\n  const handleDeleteContract = (contractId: string) => {\r\n    if (confirm('確定要刪除這個合約嗎？')) {\r\n      // TODO: [P2] FEAT src/components/features/contracts/contract-list.tsx - 實現刪除邏輯\r\n      console.log('Delete contract:', contractId);\r\n      // @assignee dev\r\n    }\r\n  };\r\n\r\n  const handleAnalyzeContract = (contractId: string) => {\r\n    // TODO: [P2] FEAT src/components/features/contracts/contract-list.tsx - 實現 AI 分析邏輯\r\n    console.log('Analyze contract:', contractId);\r\n    // @assignee dev\r"
    },
    {
      "priority": "P2",
      "type": "FEAT",
      "description": "src/components/features/contracts/contract-list.tsx - 實現 AI 分析邏輯",
      "details": [],
      "file": "src\\components\\features\\contracts\\contract-list.tsx",
      "line": 69,
      "context": "  };\r\n\r\n  const handleAnalyzeContract = (contractId: string) => {\r\n    // TODO: [P2] FEAT src/components/features/contracts/contract-list.tsx - 實現 AI 分析邏輯\r\n    console.log('Analyze contract:', contractId);\r\n    // @assignee dev\r\n  };\r\n\r\n  const handleGeneratePDF = (contractId: string) => {\r\n    // TODO: [P2] FEAT src/components/features/contracts/contract-list.tsx - 實現 PDF 生成邏輯\r\n    console.log('Generate PDF for contract:', contractId);\r\n    // @assignee dev\r\n  };\r"
    },
    {
      "priority": "P2",
      "type": "FEAT",
      "description": "src/components/features/contracts/contract-list.tsx - 實現 PDF 生成邏輯",
      "details": [],
      "file": "src\\components\\features\\contracts\\contract-list.tsx",
      "line": 75,
      "context": "  };\r\n\r\n  const handleGeneratePDF = (contractId: string) => {\r\n    // TODO: [P2] FEAT src/components/features/contracts/contract-list.tsx - 實現 PDF 生成邏輯\r\n    console.log('Generate PDF for contract:', contractId);\r\n    // @assignee dev\r\n  };\r\n\r\n  const getStatusColor = (status: string) => {\r\n    switch (status) {\r\n      case 'draft':\r\n        return 'bg-gray-100 text-gray-800';\r\n      case 'pending':\r"
    },
    {
      "priority": "P2",
      "type": "FEAT",
      "description": "src/components/features/organizations/components/roles/create-role-dialog.tsx - 實現角色創建 API 調用",
      "details": [],
      "file": "src\\components\\features\\organizations\\components\\roles\\create-role-dialog.tsx",
      "line": 70,
      "context": "  const onSubmit = async (data: RoleFormData) => {\r\n    setIsLoading(true);\r\n    try {\r\n      // TODO: [P2] FEAT src/components/features/organizations/components/roles/create-role-dialog.tsx - 實現角色創建 API 調用\r\n      console.log('Creating role for organization:', organizationId, data);\r\n      // @assignee dev\r\n      \r\n      // Simulate API call\r\n      await new Promise(resolve => setTimeout(resolve, 1000));\r\n      \r\n      reset();\r\n      onOpenChange(false);\r\n    } catch (error) {\r"
    },
    {
      "priority": "P2",
      "type": "FEAT",
      "description": "src/components/features/organizations/components/roles/role-list.tsx - 實現權限更新邏輯",
      "details": [],
      "file": "src\\components\\features\\organizations\\components\\roles\\role-list.tsx",
      "line": 169,
      "context": "  );\r\n\r\n  const handlePermissionToggle = (roleId: string, permission: keyof Role['permissions']) => {\r\n    // TODO: [P2] FEAT src/components/features/organizations/components/roles/role-list.tsx - 實現權限更新邏輯\r\n    console.log(`Toggle ${permission} for role ${roleId}`);\r\n    // @assignee dev\r\n  };\r\n\r\n  const handleAccessLevelChange = (roleId: string, accessLevel: string) => {\r\n    // TODO: [P2] FEAT src/components/features/organizations/components/roles/role-list.tsx - 實現訪問級別更新邏輯\r\n    console.log(`Change access level to ${accessLevel} for role ${roleId}`);\r\n    // @assignee dev\r\n  };\r"
    },
    {
      "priority": "P2",
      "type": "FEAT",
      "description": "src/components/features/organizations/components/roles/role-list.tsx - 實現訪問級別更新邏輯",
      "details": [],
      "file": "src\\components\\features\\organizations\\components\\roles\\role-list.tsx",
      "line": 175,
      "context": "  };\r\n\r\n  const handleAccessLevelChange = (roleId: string, accessLevel: string) => {\r\n    // TODO: [P2] FEAT src/components/features/organizations/components/roles/role-list.tsx - 實現訪問級別更新邏輯\r\n    console.log(`Change access level to ${accessLevel} for role ${roleId}`);\r\n    // @assignee dev\r\n  };\r\n\r\n  return (\r\n    <div className=\"space-y-6\">\r\n      {/* Header */}\r\n      <div className=\"flex items-center justify-between\">\r\n        <div>\r"
    },
    {
      "priority": "P2",
      "type": "FEAT",
      "description": "src/components/features/spaces/components/acceptance/initiate-acceptance-flow.tsx - 實現創建驗收 API 調用",
      "details": [],
      "file": "src\\components\\features\\spaces\\components\\acceptance\\initiate-acceptance-flow.tsx",
      "line": 55,
      "context": "  const onSubmit = async (data: InitiateAcceptanceFormValues) => {\r\n    setIsLoading(true);\r\n    try {\r\n      // TODO: [P2] FEAT src/components/features/spaces/components/acceptance/initiate-acceptance-flow.tsx - 實現創建驗收 API 調用\r\n      console.log('Creating acceptance item:', { spaceId, ...data });\r\n      // @assignee dev\r\n      await new Promise(resolve => setTimeout(resolve, 1000)); // Simulate API call\r\n      \r\n      const newAcceptance = {\r\n        id: Date.now().toString(),\r\n        ...data,\r\n        status: 'pending' as const,\r\n        requester: { id: 'current-user', name: 'Current User' },\r"
    },
    {
      "priority": "P2",
      "type": "FEAT",
      "description": "src/components/features/spaces/components/contracts/contract-details.tsx - 實現合約下載邏輯",
      "details": [],
      "file": "src\\components\\features\\spaces\\components\\contracts\\contract-details.tsx",
      "line": 98,
      "context": "  };\r\n\r\n  const handleDownload = () => {\r\n    // TODO: [P2] FEAT src/components/features/spaces/components/contracts/contract-details.tsx - 實現合約下載邏輯\r\n    console.log('Downloading contract:', contract.title);\r\n    // @assignee dev\r\n  };\r\n\r\n  return (\r\n    <Dialog open={open} onOpenChange={onOpenChange}>\r\n      <DialogContent className=\"max-w-4xl max-h-[90vh]\">\r\n        <DialogHeader>\r\n          <DialogTitle className=\"flex items-center gap-2\">\r"
    },
    {
      "priority": "P2",
      "type": "FEAT",
      "description": "src/components/features/spaces/components/contracts/create-contract-dialog.tsx - 實現創建合約 API 調用",
      "details": [],
      "file": "src\\components\\features\\spaces\\components\\contracts\\create-contract-dialog.tsx",
      "line": 69,
      "context": "  const onSubmit = async (data: CreateContractFormValues) => {\r\n    setIsLoading(true);\r\n    try {\r\n      // TODO: [P2] FEAT src/components/features/spaces/components/contracts/create-contract-dialog.tsx - 實現創建合約 API 調用\r\n      console.log('Creating contract:', { spaceId, ...data });\r\n      // @assignee dev\r\n      await new Promise(resolve => setTimeout(resolve, 1000)); // Simulate API call\r\n      \r\n      const newContract = {\r\n        id: Date.now().toString(),\r\n        ...data,\r\n        startDate: new Date(data.startDate),\r\n        endDate: data.endDate ? new Date(data.endDate) : undefined,\r"
    },
    {
      "priority": "P2",
      "type": "FEAT",
      "description": "src/components/features/spaces/components/issues/create-issue-form.tsx - 實現創建問題 API 調用",
      "details": [],
      "file": "src\\components\\features\\spaces\\components\\issues\\create-issue-form.tsx",
      "line": 50,
      "context": "  const onSubmit = async (data: CreateIssueFormValues) => {\r\n    setIsLoading(true);\r\n    try {\r\n      // TODO: [P2] FEAT src/components/features/spaces/components/issues/create-issue-form.tsx - 實現創建問題 API 調用\r\n      console.log('Creating issue:', { spaceId, ...data });\r\n      // @assignee dev\r\n      await new Promise(resolve => setTimeout(resolve, 1000)); // Simulate API call\r\n      \r\n      const newIssue = {\r\n        id: Date.now().toString(),\r\n        ...data,\r\n        status: 'open' as const,\r\n        reporter: { id: 'current-user', name: 'Current User' },\r"
    },
    {
      "priority": "P2",
      "type": "FEAT",
      "description": "src/components/features/spaces/components/overview/hooks/use-dashboard-data.ts - 替換為實際的 API 調用",
      "details": [
        "這裡使用模擬數據"
      ],
      "file": "src\\components\\features\\spaces\\components\\overview\\hooks\\use-dashboard-data.ts",
      "line": 41,
      "assignee": "dev",
      "context": "\r\n  // 獲取儀表板統計數據\r\n  const fetchStats = useCallback(async (): Promise<DashboardStats> => {\r\n    // TODO: [P2] FEAT src/components/features/spaces/components/overview/hooks/use-dashboard-data.ts - 替換為實際的 API 調用\r\n    // 這裡使用模擬數據\r\n    // @assignee dev\r\n    return new Promise((resolve) => {\r\n      setTimeout(() => {\r\n        resolve({\r\n          members: Math.floor(Math.random() * 50) + 10,\r\n          files: Math.floor(Math.random() * 200) + 50,\r\n          issues: Math.floor(Math.random() * 20) + 2,\r\n          lastActivity: '2 hours ago',\r"
    },
    {
      "priority": "P2",
      "type": "FEAT",
      "description": "src/components/features/spaces/components/overview/hooks/use-dashboard-data.ts - 替換為實際的 API 調用",
      "details": [
        "這裡使用模擬數據"
      ],
      "file": "src\\components\\features\\spaces\\components\\overview\\hooks\\use-dashboard-data.ts",
      "line": 60,
      "assignee": "dev",
      "context": "\r\n  // 獲取活動數據\r\n  const fetchActivities = useCallback(async (): Promise<ActivityItem[]> => {\r\n    // TODO: [P2] FEAT src/components/features/spaces/components/overview/hooks/use-dashboard-data.ts - 替換為實際的 API 調用\r\n    // 這裡使用模擬數據\r\n    // @assignee dev\r\n    return new Promise((resolve) => {\r\n      setTimeout(() => {\r\n        const mockActivities: ActivityItem[] = [\r\n          {\r\n            id: '1',\r\n            type: 'file_upload',\r\n            user: 'John Doe',\r"
    },
    {
      "priority": "P2",
      "type": "FEAT",
      "description": "src/components/features/spaces/components/participants/invite-participant-dialog.tsx - 顯示錯誤提示",
      "details": [],
      "file": "src\\components\\features\\spaces\\components\\participants\\invite-participant-dialog.tsx",
      "line": 54,
      "assignee": "dev",
      "context": "      onOpenChange(false);\r\n    } catch (error) {\r\n      console.error('Failed to invite participant:', error);\r\n      // TODO: [P2] FEAT src/components/features/spaces/components/participants/invite-participant-dialog.tsx - 顯示錯誤提示\r\n      // @assignee dev\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Dialog open={open} onOpenChange={onOpenChange}>\r\n      <DialogContent className=\"sm:max-w-[425px]\">\r"
    },
    {
      "priority": "P2",
      "type": "FEAT",
      "description": "src/components/features/spaces/components/participants/participant-role-editor.tsx - 實現角色變更 API 調用",
      "details": [],
      "file": "src\\components\\features\\spaces\\components\\participants\\participant-role-editor.tsx",
      "line": 47,
      "context": "  const onSubmit = async (data: RoleFormValues) => {\r\n    setIsLoading(true);\r\n    try {\r\n      // TODO: [P2] FEAT src/components/features/spaces/components/participants/participant-role-editor.tsx - 實現角色變更 API 調用\r\n      console.log('Changing role:', { participantId, newRole: data.role });\r\n      // @assignee dev\r\n      await new Promise(resolve => setTimeout(resolve, 1000)); // Simulate API call\r\n      onRoleChange?.(participantId, data.role);\r\n      onOpenChange(false);\r\n    } catch (error) {\r\n      console.error('Failed to change role:', error);\r\n    } finally {\r\n      setIsLoading(false);\r"
    },
    {
      "priority": "P2",
      "type": "FEAT",
      "description": "src/components/features/spaces/components/participants/participant-table.tsx - 打開角色更新對話框",
      "details": [],
      "file": "src\\components\\features\\spaces\\components\\participants\\participant-table.tsx",
      "line": 141,
      "context": "  }, [actions]);\r\n\r\n  const handleUpdateRole = useCallback((participantId: string) => {\r\n    // TODO: [P2] FEAT src/components/features/spaces/components/participants/participant-table.tsx - 打開角色更新對話框\r\n    console.log('Update role for participant:', participantId);\r\n    // @assignee dev\r\n  }, []);\r\n\r\n  const handleRemove = useCallback((participantId: string) => {\r\n    if (confirm('確�?要移?�此?�員?��?')) {\r\n      actions.onRemove(participantId);\r\n    }\r\n  }, [actions]);\r"
    },
    {
      "priority": "P2",
      "type": "FEAT",
      "description": "src/components/features/spaces/components/participants/virtualized-table.tsx - 實現編輯對話框",
      "details": [],
      "file": "src\\components\\features\\spaces\\components\\participants\\virtualized-table.tsx",
      "line": 211,
      "context": "  const handleAction = useCallback((action: string, participantId: string) => {\r\n    switch (action) {\r\n      case 'edit':\r\n        // TODO: [P2] FEAT src/components/features/spaces/components/participants/virtualized-table.tsx - 實現編輯對話框\r\n        console.log('編輯?�員:', participantId);\r\n        break;\r\n      case 'role':\r\n        // TODO: [P2] FEAT src/components/features/spaces/components/participants/virtualized-table.tsx - 實現角色變更對話框\r\n        console.log('變更角色:', participantId);\r\n        break;\r\n      case 'remove':\r\n        if (confirm('確�?要移?�此?�員?��?')) {\r\n          actions.onRemove(participantId);\r"
    },
    {
      "priority": "P2",
      "type": "FEAT",
      "description": "src/components/features/spaces/components/participants/virtualized-table.tsx - 實現角色變更對話框",
      "details": [],
      "file": "src\\components\\features\\spaces\\components\\participants\\virtualized-table.tsx",
      "line": 215,
      "context": "        console.log('編輯?�員:', participantId);\r\n        break;\r\n      case 'role':\r\n        // TODO: [P2] FEAT src/components/features/spaces/components/participants/virtualized-table.tsx - 實現角色變更對話框\r\n        console.log('變更角色:', participantId);\r\n        break;\r\n      case 'remove':\r\n        if (confirm('確�?要移?�此?�員?��?')) {\r\n          actions.onRemove(participantId);\r\n        }\r\n        break;\r\n    }\r\n  }, [actions]);\r"
    },
    {
      "priority": "P2",
      "type": "FEAT",
      "description": "src/components/features/spaces/components/quality/create-checklist-template.tsx - 實現創建模板 API 調用",
      "details": [],
      "file": "src\\components\\features\\spaces\\components\\quality\\create-checklist-template.tsx",
      "line": 69,
      "context": "  const onSubmit = async (data: ChecklistTemplateFormValues) => {\r\n    setIsLoading(true);\r\n    try {\r\n      // TODO: [P2] FEAT src/components/features/spaces/components/quality/create-checklist-template.tsx - 實現創建模板 API 調用\r\n      console.log('Creating checklist template:', { spaceId, ...data });\r\n      // @assignee dev\r\n      await new Promise(resolve => setTimeout(resolve, 1000)); // Simulate API call\r\n      \r\n      const newTemplate = {\r\n        id: Date.now().toString(),\r\n        ...data,\r\n        createdAt: new Date(),\r\n        createdBy: 'current-user',\r"
    },
    {
      "priority": "P2",
      "type": "FEAT",
      "description": "src/components/features/spaces/components/report/create-report-dialog.tsx - 實現創建報告 API 調用",
      "details": [],
      "file": "src\\components\\features\\spaces\\components\\report\\create-report-dialog.tsx",
      "line": 68,
      "context": "  const onSubmit = async (data: CreateReportFormValues) => {\r\n    setIsLoading(true);\r\n    try {\r\n      // TODO: [P2] FEAT src/components/features/spaces/components/report/create-report-dialog.tsx - 實現創建報告 API 調用\r\n      console.log('Creating report:', { spaceId, ...data });\r\n      // @assignee dev\r\n      await new Promise(resolve => setTimeout(resolve, 2000)); // Simulate API call\r\n      \r\n      const newReport = {\r\n        id: Date.now().toString(),\r\n        ...data,\r\n        status: 'generating' as const,\r\n        createdAt: new Date(),\r"
    },
    {
      "priority": "P2",
      "type": "FEAT",
      "description": "src/components/features/spaces/components/report/report-dashboard.tsx - 實現實際下載邏輯",
      "details": [],
      "file": "src\\components\\features\\spaces\\components\\report\\report-dashboard.tsx",
      "line": 124,
      "context": "\r\n  const handleDownload = (report: Report) => {\r\n    if (report.downloadUrl) {\r\n      // TODO: [P2] FEAT src/components/features/spaces/components/report/report-dashboard.tsx - 實現實際下載邏輯\r\n      console.log('Downloading report:', report.title);\r\n      // @assignee dev\r\n      window.open(report.downloadUrl, '_blank');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"space-y-6\">\r\n      <div className=\"flex items-center justify-between\">\r"
    },
    {
      "priority": "P2",
      "type": "FEAT",
      "description": "src/components/features/spaces/components/report/report-viewer.tsx - 實現實際下載邏輯",
      "details": [],
      "file": "src\\components\\features\\spaces\\components\\report\\report-viewer.tsx",
      "line": 79,
      "context": "\r\n  const handleDownload = () => {\r\n    if (report.downloadUrl) {\r\n      // TODO: [P2] FEAT src/components/features/spaces/components/report/report-viewer.tsx - 實現實際下載邏輯\r\n      console.log('Downloading report:', report.title);\r\n      // @assignee dev\r\n      window.open(report.downloadUrl, '_blank');\r\n    }\r\n  };\r\n\r\n  // Mock report content based on type\r\n  const getReportContent = () => {\r\n    switch (report.type) {\r"
    },
    {
      "priority": "P2",
      "type": "FEAT",
      "description": "src/hooks/use-permissions.ts - 實現組織權限檢查",
      "details": [
        "需要根據組織層級的權限配置進行檢查"
      ],
      "file": "src\\hooks\\use-permissions.ts",
      "line": 128,
      "assignee": "dev",
      "context": "    organizationId: string,\r\n    permission: Permission\r\n  ): Promise<PermissionCheckResult> => {\r\n    // TODO: [P2] FEAT src/hooks/use-permissions.ts - 實現組織權限檢查\r\n    // 需要根據組織層級的權限配置進行檢查\r\n    // @assignee dev\r\n    return checkPermission(permission);\r\n  }, [checkPermission]);\r\n\r\n  // 批量檢查空間權限\r\n  const checkSpacePermissions = useCallback(async (\r\n    spaceId: string,\r\n    permissions: Permission[]\r"
    },
    {
      "priority": "P2",
      "type": "FEAT",
      "description": "src/lib/role-management.ts - 實作角色定義查詢功能",
      "details": [
        "需要從資料庫或配置中獲取角色定義"
      ],
      "file": "src\\lib\\role-management.ts",
      "line": 15,
      "assignee": "dev",
      "context": "\nexport const roleManagementService = {\n  getRoleDefinition: (_roleId: string): RoleDefinition | null => {\n    // TODO: [P2] FEAT src/lib/role-management.ts - 實作角色定義查詢功能\n    // 需要從資料庫或配置中獲取角色定義\n    // @assignee dev\n    return null;\n  },\n  checkPermission: async (_userId: string, _spaceId: string, _permission: Permission, _userRoleAssignment: unknown) => {\n    // TODO: [P1] FEAT src/lib/role-management.ts - 實作權限檢查邏輯\n    // 需要根據用戶角色和權限配置進行檢查\n    // @assignee dev\n    return {"
    }
  ],
  "aiInstructions": "# AI Agent 工作指令\n## 📊 專案狀態\n- 總 TODO 數量: 35\n- 🔴 緊急項目: 0\n## 📋 建議處理順序\n依照以下順序處理 TODO：\n1. P0 - SECURITY（安全性問題）\n2. P0 - FIX（緊急修復）\n3. P1 - SECURITY\n4. P1 - FIX\n5. P1 - FEAT（重要功能）\n6. P2 項目\n7. P3 項目"
}