{
  "summary": {
    "total": 56,
    "byPriority": {
      "P2": 42,
      "P1": 14
    },
    "byType": {
      "PERF": 2,
      "REFACTOR": 28,
      "FEAT": 14,
      "CLEANUP": 2,
      "TYPING": 1,
      "HOOK": 2,
      "VAN": 7
    },
    "urgent": 5
  },
  "todos": [
    {
      "priority": "P1",
      "type": "REFACTOR",
      "description": "src/components/features/spaces/components/ - 減少過度抽象的組件層級",
      "details": [
        "問題：70 個文件過度拆分，造成不必要的複雜性",
        "影響：導入路徑過長、維護成本高、認知負擔重",
        "建議：",
        "1) 合併功能相似的組件（如多個 list 組件）",
        "2) 簡化目錄結構，減少嵌套層級",
        "3) 移除不必要的 barrel exports",
        "4) 遵循 Next.js 15 組件組合模式"
      ],
      "file": "docs\\代碼參考\\src\\components\\features\\spaces\\components\\index.ts",
      "line": 7,
      "assignee": "frontend",
      "deadline": "2025-01-20",
      "context": " * by providing a single, consistent path.\n */\n\n// TODO: [P1] REFACTOR src/components/features/spaces/components/ - 減少過度抽象的組件層級\n// 問題：70 個文件過度拆分，造成不必要的複雜性\n// 影響：導入路徑過長、維護成本高、認知負擔重\n// 建議：\n// 1) 合併功能相似的組件（如多個 list 組件）\n// 2) 簡化目錄結構，減少嵌套層級\n// 3) 移除不必要的 barrel exports\n// 4) 遵循 Next.js 15 組件組合模式\n// @assignee frontend-team\n// @deadline 2025-01-20"
    },
    {
      "priority": "P1",
      "type": "REFACTOR",
      "description": "src/app/(app)/layout.tsx - 降低客戶端邊界與狀態複雜度",
      "details": [
        "導向：",
        "1) 盡量保持本檔為瘦客戶端殼層，將資料抓取/權限/聚合移至 Server Components 或 Server Actions。",
        "2) 將重型 UI（Sidebar/Nav 計算）與資料相依分離，採 props 注入；避免在 layout 內多重 useEffect/useMemo 疊加。",
        "3) 使用 App Router 推薦：父層 Server Layout + 子層 Client Providers（參考 Next.js docs: server and client components, use client in provider）。"
      ],
      "file": "docs\\代碼參考\\src\\app\\(app)\\layout.tsx",
      "line": 2,
      "assignee": "ai",
      "context": "'use client';\n// TODO: [P1] REFACTOR src/app/(app)/layout.tsx - 降低客戶端邊界與狀態複雜度\n// 導向：\n// 1) 盡量保持本檔為瘦客戶端殼層，將資料抓取/權限/聚合移至 Server Components 或 Server Actions。\n// 2) 將重型 UI（Sidebar/Nav 計算）與資料相依分離，採 props 注入；避免在 layout 內多重 useEffect/useMemo 疊加。\n// 3) 使用 App Router 推薦：父層 Server Layout + 子層 Client Providers（參考 Next.js docs: server and client components, use client in provider）。\n// @assignee ai\n\nimport {\n  FirebaseClientProvider,\n  useUser,"
    },
    {
      "priority": "P1",
      "type": "REFACTOR",
      "description": "src/app/(app)/organizations/[organizationslug]/inventory/page.tsx - 以 Server 取得 org 與清單",
      "details": [
        "說明：目前在 client 端以 getDocs/queries 聚合多個集合，建議改為父層 Server Page 聚合輸出，",
        "並以 props 餵入（或分段 Suspense），降低 client 邏輯與狀態，維持效能且更易讀。"
      ],
      "file": "docs\\代碼參考\\src\\app\\(app)\\organizations\\[organizationslug]\\inventory\\page.tsx",
      "line": 3,
      "assignee": "ai",
      "context": "'use client';\n\n// TODO: [P1] REFACTOR src/app/(app)/organizations/[organizationslug]/inventory/page.tsx - 以 Server 取得 org 與清單\n// 說明：目前在 client 端以 getDocs/queries 聚合多個集合，建議改為父層 Server Page 聚合輸出，\n// 並以 props 餵入（或分段 Suspense），降低 client 邏輯與狀態，維持效能且更易讀。\n// @assignee ai\n\nimport React, { useMemo, useState, useEffect } from 'react';\nimport Link from 'next/link';\nimport { useFirestore, useCollection } from '@/firebase';\nimport { collection, query, where, getDocs } from 'firebase/firestore';\nimport {"
    },
    {
      "priority": "P1",
      "type": "TYPING",
      "description": "no-any (L192, L221) [低認知]",
      "details": [
        "TODO: [P1] HOOK deps (L365) [低認知]",
        "TODO: [P1] REFACTOR src/components/auth/auth-provider.tsx - 縮減責任邊界與資料下傳",
        "原則（Next.js App Router / Firebase）：",
        "- Firestore 聚合轉服務層；Provider 僅保留 userId/effectivePermissions 等最小必要。",
        "- 禁止在 render 期間做 I/O；mutation 走 Server Actions 或明確事件觸發。",
        "- 將 `PermissionGuard` 抽至更小 API（例如 useHasPermission(selector)）以便編譯期 tree-shaking。"
      ],
      "file": "docs\\代碼參考\\src\\components\\auth\\auth-provider.tsx",
      "line": 9,
      "assignee": "ai",
      "context": "\n'use client';\n// TODO: [P2] CLEANUP unused import (L39) [低認知]\n// TODO: [P1] TYPING no-any (L192, L221) [低認知]\n// TODO: [P1] HOOK deps (L365) [低認知]\n// TODO: [P1] REFACTOR src/components/auth/auth-provider.tsx - 縮減責任邊界與資料下傳\n// 原則（Next.js App Router / Firebase）：\n// - Firestore 聚合轉服務層；Provider 僅保留 userId/effectivePermissions 等最小必要。\n// - 禁止在 render 期間做 I/O；mutation 走 Server Actions 或明確事件觸發。\n// - 將 `PermissionGuard` 抽至更小 API（例如 useHasPermission(selector)）以便編譯期 tree-shaking。\n// @assignee ai\n\n// TODO: [P2] REFACTOR src/components/auth/auth-provider.tsx - 奧卡姆剃刀精簡權限/認證 Provider"
    },
    {
      "priority": "P1",
      "type": "HOOK",
      "description": "deps (L365) [低認知]",
      "details": [
        "TODO: [P1] REFACTOR src/components/auth/auth-provider.tsx - 縮減責任邊界與資料下傳",
        "原則（Next.js App Router / Firebase）：",
        "- Firestore 聚合轉服務層；Provider 僅保留 userId/effectivePermissions 等最小必要。",
        "- 禁止在 render 期間做 I/O；mutation 走 Server Actions 或明確事件觸發。",
        "- 將 `PermissionGuard` 抽至更小 API（例如 useHasPermission(selector)）以便編譯期 tree-shaking。"
      ],
      "file": "docs\\代碼參考\\src\\components\\auth\\auth-provider.tsx",
      "line": 10,
      "assignee": "ai",
      "context": "'use client';\n// TODO: [P2] CLEANUP unused import (L39) [低認知]\n// TODO: [P1] TYPING no-any (L192, L221) [低認知]\n// TODO: [P1] HOOK deps (L365) [低認知]\n// TODO: [P1] REFACTOR src/components/auth/auth-provider.tsx - 縮減責任邊界與資料下傳\n// 原則（Next.js App Router / Firebase）：\n// - Firestore 聚合轉服務層；Provider 僅保留 userId/effectivePermissions 等最小必要。\n// - 禁止在 render 期間做 I/O；mutation 走 Server Actions 或明確事件觸發。\n// - 將 `PermissionGuard` 抽至更小 API（例如 useHasPermission(selector)）以便編譯期 tree-shaking。\n// @assignee ai\n\n// TODO: [P2] REFACTOR src/components/auth/auth-provider.tsx - 奧卡姆剃刀精簡權限/認證 Provider\n// 建議："
    },
    {
      "priority": "P1",
      "type": "REFACTOR",
      "description": "src/components/auth/auth-provider.tsx - 縮減責任邊界與資料下傳",
      "details": [
        "原則（Next.js App Router / Firebase）：",
        "- Firestore 聚合轉服務層；Provider 僅保留 userId/effectivePermissions 等最小必要。",
        "- 禁止在 render 期間做 I/O；mutation 走 Server Actions 或明確事件觸發。",
        "- 將 `PermissionGuard` 抽至更小 API（例如 useHasPermission(selector)）以便編譯期 tree-shaking。"
      ],
      "file": "docs\\代碼參考\\src\\components\\auth\\auth-provider.tsx",
      "line": 11,
      "assignee": "ai",
      "context": "// TODO: [P2] CLEANUP unused import (L39) [低認知]\n// TODO: [P1] TYPING no-any (L192, L221) [低認知]\n// TODO: [P1] HOOK deps (L365) [低認知]\n// TODO: [P1] REFACTOR src/components/auth/auth-provider.tsx - 縮減責任邊界與資料下傳\n// 原則（Next.js App Router / Firebase）：\n// - Firestore 聚合轉服務層；Provider 僅保留 userId/effectivePermissions 等最小必要。\n// - 禁止在 render 期間做 I/O；mutation 走 Server Actions 或明確事件觸發。\n// - 將 `PermissionGuard` 抽至更小 API（例如 useHasPermission(selector)）以便編譯期 tree-shaking。\n// @assignee ai\n\n// TODO: [P2] REFACTOR src/components/auth/auth-provider.tsx - 奧卡姆剃刀精簡權限/認證 Provider\n// 建議：\n// 1) 將 Firestore 讀取拆為最小 API（單一 fetchUserRoleAssignment），其餘聚合邏輯移至 service；Provider 僅保存必要狀態。"
    },
    {
      "priority": "P1",
      "type": "HOOK",
      "description": "deps (L156) [低認知]",
      "details": [
        "TODO: [P2] REFACTOR src/components/auth/role-manager.tsx - 避免列表渲染期昂貴操作",
        "建議：",
        "- 將 roles/users 載入改為懶載（按需打開時再查詢）；表格僅顯示前幾個權限，其餘以 lazy 展開。",
        "- 對話框抽成小型子元件或同檔內聯，避免 props 鏈過深；重複邏輯 ≥3 次再抽象。",
        "- 權限檢查改用 `useAuth()` 的單一 selector，移除本檔重複 hasPermission 調用。"
      ],
      "file": "docs\\代碼參考\\src\\components\\auth\\role-manager.tsx",
      "line": 9,
      "assignee": "ai",
      "context": "\n'use client';\n// TODO: [P2] CLEANUP unused imports/vars (L28, L41, L70, L88, L89, L134) [低認知]\n// TODO: [P1] HOOK deps (L156) [低認知]\n// TODO: [P2] REFACTOR src/components/auth/role-manager.tsx - 避免列表渲染期昂貴操作\n// 建議：\n// - 將 roles/users 載入改為懶載（按需打開時再查詢）；表格僅顯示前幾個權限，其餘以 lazy 展開。\n// - 對話框抽成小型子元件或同檔內聯，避免 props 鏈過深；重複邏輯 ≥3 次再抽象。\n// - 權限檢查改用 `useAuth()` 的單一 selector，移除本檔重複 hasPermission 調用。\n// @assignee ai\n\n// TODO: [P2] REFACTOR src/components/auth/role-manager.tsx - 奧卡姆剃刀精簡角色管理\n// 建議："
    },
    {
      "priority": "P1",
      "type": "VAN",
      "description": "- 移除未使用的重命名導入",
      "details": [
        "問題：Avatar, AvatarFallback, AvatarImage, Phone 導入後從未使用",
        "解決方案：直接移除未使用的導入語句",
        "現代化建議：使用 ESLint no-unused-vars 規則自動檢測",
        "效能影響：減少 bundle 大小，降低認知負擔，提升 AI agent 代碼理解",
        "相關受影響檔案：無（這些導入未在任何地方使用）"
      ],
      "file": "docs\\代碼參考\\src\\components\\features\\spaces\\components\\contracts\\contract-details.tsx",
      "line": 3,
      "context": "'use client';\n\n// TODO: [P1] VAN - 移除未使用的重命名導入\n// 問題：Avatar, AvatarFallback, AvatarImage, Phone 導入後從未使用\n// 解決方案：直接移除未使用的導入語句\n// 現代化建議：使用 ESLint no-unused-vars 規則自動檢測\n// 效能影響：減少 bundle 大小，降低認知負擔，提升 AI agent 代碼理解\n// 相關受影響檔案：無（這些導入未在任何地方使用）\n\nimport { Badge } from '@/components/ui/badge';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';"
    },
    {
      "priority": "P1",
      "type": "REFACTOR",
      "description": "src/components/features/spaces/components/file-explorer/filter-panel.tsx - 抽離 UI 與狀態設定",
      "details": [
        "說明：將篩選條件狀態 schema 與預設值抽到 `shared`（或 features 專屬 types）集中管理；",
        "Panel 僅處理展示與事件回呼，提升模組邊界清晰度與型別一致性。"
      ],
      "file": "docs\\代碼參考\\src\\components\\features\\spaces\\components\\file-explorer\\filter-panel.tsx",
      "line": 9,
      "assignee": "ai",
      "context": " * filters or save them for later use.\n */\n'use client';\n// TODO: [P1] REFACTOR src/components/features/spaces/components/file-explorer/filter-panel.tsx - 抽離 UI 與狀態設定\n// 說明：將篩選條件狀態 schema 與預設值抽到 `shared`（或 features 專屬 types）集中管理；\n// Panel 僅處理展示與事件回呼，提升模組邊界清晰度與型別一致性。\n// @assignee ai\n\nimport React, { useState } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Checkbox } from '@/components/ui/checkbox';"
    },
    {
      "priority": "P1",
      "type": "REFACTOR",
      "description": "src/components/features/spaces/components/file-explorer/folder-tree.tsx - 抽離 mock 與分層",
      "details": [
        "說明：將 mockFolders 與 organizeFilesIntoFolders 移到純函數模組（shared/utils 或 features 層 utils），",
        "並以 props 注入結果；本元件專注渲染與互動，降低檔案長度與複雜度。"
      ],
      "file": "docs\\代碼參考\\src\\components\\features\\spaces\\components\\file-explorer\\folder-tree.tsx",
      "line": 9,
      "assignee": "ai",
      "context": " * of the file explorer.\n */\n'use client';\n// TODO: [P1] REFACTOR src/components/features/spaces/components/file-explorer/folder-tree.tsx - 抽離 mock 與分層\n// 說明：將 mockFolders 與 organizeFilesIntoFolders 移到純函數模組（shared/utils 或 features 層 utils），\n// 並以 props 注入結果；本元件專注渲染與互動，降低檔案長度與複雜度。\n// @assignee ai\n\nimport React, { useState } from 'react';\n\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { ScrollArea } from '@/components/ui/scroll-area';\nimport { "
    },
    {
      "priority": "P1",
      "type": "VAN",
      "description": "- 移除未使用的重命名導入",
      "details": [
        "問題：Table, TableBody, TableCell, TableHead, TableHeader, TableRow, User 導入後從未使用",
        "解決方案：直接移除未使用的導入語句",
        "現代化建議：使用 ESLint no-unused-vars 規則自動檢測",
        "效能影響：減少 bundle 大小，降低認知負擔，提升 AI agent 代碼理解",
        "相關受影響檔案：無（這些導入未在任何地方使用）"
      ],
      "file": "docs\\代碼參考\\src\\components\\features\\spaces\\components\\file-explorer\\packages-tab.tsx",
      "line": 18,
      "context": "import { Label } from '@/components/ui/label';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';\n// TODO: [P1] VAN - 移除未使用的重命名導入\n// 問題：Table, TableBody, TableCell, TableHead, TableHeader, TableRow, User 導入後從未使用\n// 解決方案：直接移除未使用的導入語句\n// 現代化建議：使用 ESLint no-unused-vars 規則自動檢測\n// 效能影響：減少 bundle 大小，降低認知負擔，提升 AI agent 代碼理解\n// 相關受影響檔案：無（這些導入未在任何地方使用）\nimport { \n  Package, \n  Plus, \n  Download, "
    },
    {
      "priority": "P1",
      "type": "VAN",
      "description": "- 移除未使用的重命名導入",
      "details": [
        "問題：Skeleton 導入後從未使用",
        "解決方案：直接移除未使用的導入語句",
        "現代化建議：使用 ESLint no-unused-vars 規則自動檢測",
        "效能影響：減少 bundle 大小，降低認知負擔，提升 AI agent 代碼理解",
        "相關受影響檔案：無（這個導入未在任何地方使用）"
      ],
      "file": "docs\\代碼參考\\src\\components\\forms\\form-card.tsx",
      "line": 18,
      "context": "  CardTitle,\n  CardFooter,\n} from '@/components/ui/card';\n// TODO: [P1] VAN - 移除未使用的重命名導入\n// 問題：Skeleton 導入後從未使用\n// 解決方案：直接移除未使用的導入語句\n// 現代化建議：使用 ESLint no-unused-vars 規則自動檢測\n// 效能影響：減少 bundle 大小，降低認知負擔，提升 AI agent 代碼理解\n// 相關受影響檔案：無（這個導入未在任何地方使用）\n\nimport { Form } from '@/components/ui/form';\nimport { Button } from '@/components/ui/button';\nimport { UseFormReturn, FieldValues } from 'react-hook-form';"
    },
    {
      "priority": "P1",
      "type": "REFACTOR",
      "description": "src/components/search-command.tsx - 抽離查詢為 Server Action/API 並以 props 餵入",
      "details": [
        "說明：目前直接在 client 端組合 Firestore 查詢，造成 UI 與資料耦合、增加狀態複雜度。",
        "建議：建立 server action（或輕量 API route）處理查詢與權限，再以 props 餵入、或使用 Suspense + use 從父層 Server Component 傳資料。",
        "目標：降低認知負擔與邊界複雜度，維持現有效能。"
      ],
      "file": "docs\\代碼參考\\src\\components\\search-command.tsx",
      "line": 10,
      "assignee": "ai",
      "context": "\n'use client';\n\n// TODO: [P1] REFACTOR src/components/search-command.tsx - 抽離查詢為 Server Action/API 並以 props 餵入\n// 說明：目前直接在 client 端組合 Firestore 查詢，造成 UI 與資料耦合、增加狀態複雜度。\n// 建議：建立 server action（或輕量 API route）處理查詢與權限，再以 props 餵入、或使用 Suspense + use 從父層 Server Component 傳資料。\n// 目標：降低認知負擔與邊界複雜度，維持現有效能。\n// @assignee ai\n\nimport React, { useState, useEffect, useMemo, useCallback } from 'react';\nimport {\n  CommandDialog,\n  CommandEmpty,"
    },
    {
      "priority": "P1",
      "type": "REFACTOR",
      "description": "src/firebase/provider.tsx - Provider 只做服務注入與極簡使用者狀態",
      "details": [
        "指南：",
        "1) 移除非必要邏輯（如聚合/轉換），避免與授權/角色耦合；與 `components/auth` 分離。",
        "2) 嚴格作為 Client Provider，被 Server Layout 包裹；避免在此放置 UI 或多重副作用。",
        "3) 將錯誤呈現交由上層 global-error，僅維護 user/isUserLoading/userError 的最小狀態。"
      ],
      "file": "docs\\代碼參考\\src\\firebase\\provider.tsx",
      "line": 2,
      "assignee": "ai",
      "context": "'use client';\n// TODO: [P1] REFACTOR src/firebase/provider.tsx - Provider 只做服務注入與極簡使用者狀態\n// 指南：\n// 1) 移除非必要邏輯（如聚合/轉換），避免與授權/角色耦合；與 `components/auth` 分離。\n// 2) 嚴格作為 Client Provider，被 Server Layout 包裹；避免在此放置 UI 或多重副作用。\n// 3) 將錯誤呈現交由上層 global-error，僅維護 user/isUserLoading/userError 的最小狀態。\n// @assignee ai\n\n\nimport React, { createContext, useContext, ReactNode, useMemo, useState, useEffect } from 'react';\nimport { FirebaseApp } from 'firebase/app';"
    },
    {
      "priority": "P2",
      "type": "REFACTOR",
      "description": "src/components/features/spaces/components/ - 合併重複的組件邏輯",
      "details": [
        "問題：多個 list/card/dialog 組件存在重複邏輯",
        "影響：代碼重複、維護困難、一致性問題",
        "建議：",
        "1) 創建通用的 List/Card/Dialog 基礎組件",
        "2) 使用 TypeScript 泛型提高類型安全",
        "3) 實現組合模式而非繼承",
        "4) 遵循 DRY 原則和奧卡姆剃刀",
        "Spaces feature components exports"
      ],
      "file": "docs\\代碼參考\\src\\components\\features\\spaces\\components\\index.ts",
      "line": 18,
      "assignee": "frontend",
      "deadline": "2025-01-30",
      "context": "// @assignee frontend-team\n// @deadline 2025-01-20\n\n// TODO: [P2] REFACTOR src/components/features/spaces/components/ - 合併重複的組件邏輯\n// 問題：多個 list/card/dialog 組件存在重複邏輯\n// 影響：代碼重複、維護困難、一致性問題\n// 建議：\n// 1) 創建通用的 List/Card/Dialog 基礎組件\n// 2) 使用 TypeScript 泛型提高類型安全\n// 3) 實現組合模式而非繼承\n// 4) 遵循 DRY 原則和奧卡姆剃刀\n// @assignee frontend-team\n// @deadline 2025-01-30"
    },
    {
      "priority": "P2",
      "type": "PERF",
      "description": "next.config.ts - 實現 Next.js 15 性能優化配置",
      "details": [
        "問題：未充分利用 Next.js 15 的性能優化特性",
        "影響：圖片載入性能差、bundle 大小過大",
        "建議：",
        "1) 啟用 optimizePackageImports 減少 bundle 大小",
        "2) 配置 bundlePagesRouterDependencies 優化依賴打包",
        "3) 添加 experimental.turbo 配置提升開發體驗",
        "4) 配置適當的圖片優化參數"
      ],
      "file": "docs\\代碼參考\\next.config.ts",
      "line": 16,
      "assignee": "performance",
      "deadline": "2025-02-01",
      "context": "    esmExternals: true,\n  },\n  \n  // TODO: [P2] PERF next.config.ts - 實現 Next.js 15 性能優化配置\n  // 問題：未充分利用 Next.js 15 的性能優化特性\n  // 影響：圖片載入性能差、bundle 大小過大\n  // 建議：\n  // 1) 啟用 optimizePackageImports 減少 bundle 大小\n  // 2) 配置 bundlePagesRouterDependencies 優化依賴打包\n  // 3) 添加 experimental.turbo 配置提升開發體驗\n  // 4) 配置適當的圖片優化參數\n  // @assignee performance-team\n  // @deadline 2025-02-01"
    },
    {
      "priority": "P2",
      "type": "PERF",
      "description": "next.config.ts - 實現 Next.js 15 性能優化配置",
      "details": [
        "問題：未充分利用 Next.js 15 的性能優化特性",
        "影響：圖片載入性能差、bundle 大小過大",
        "建議：",
        "1) 啟用 optimizePackageImports 減少 bundle 大小",
        "2) 配置 bundlePagesRouterDependencies 優化依賴打包",
        "3) 添加 experimental.turbo 配置提升開發體驗",
        "4) 配置適當的圖片優化參數"
      ],
      "file": "next.config.ts",
      "line": 16,
      "assignee": "performance",
      "deadline": "2025-02-01",
      "context": "    esmExternals: true,\n  },\n  \n  // TODO: [P2] PERF next.config.ts - 實現 Next.js 15 性能優化配置\n  // 問題：未充分利用 Next.js 15 的性能優化特性\n  // 影響：圖片載入性能差、bundle 大小過大\n  // 建議：\n  // 1) 啟用 optimizePackageImports 減少 bundle 大小\n  // 2) 配置 bundlePagesRouterDependencies 優化依賴打包\n  // 3) 添加 experimental.turbo 配置提升開發體驗\n  // 4) 配置適當的圖片優化參數\n  // @assignee performance-team\n  // @deadline 2025-02-01"
    },
    {
      "priority": "P2",
      "type": "REFACTOR",
      "description": "src/components/features/spaces/hooks/ - 簡化 hooks 邏輯",
      "details": [
        "問題：多個 hooks 文件可能包含重複邏輯",
        "影響：代碼重複、狀態管理複雜",
        "建議：",
        "1) 合併相似的 hooks 邏輯",
        "2) 使用 React 19 的新 hooks 特性",
        "3) 實現更簡單的狀態管理模式",
        "4) 減少不必要的 useEffect 使用",
        "Spaces feature hooks exports"
      ],
      "file": "docs\\代碼參考\\src\\components\\features\\spaces\\hooks\\index.ts",
      "line": 7,
      "assignee": "frontend",
      "deadline": "2025-02-05",
      "context": " * hooks, such as those for handling actions, into other components.\n */\n\n// TODO: [P2] REFACTOR src/components/features/spaces/hooks/ - 簡化 hooks 邏輯\n// 問題：多個 hooks 文件可能包含重複邏輯\n// 影響：代碼重複、狀態管理複雜\n// 建議：\n// 1) 合併相似的 hooks 邏輯\n// 2) 使用 React 19 的新 hooks 特性\n// 3) 實現更簡單的狀態管理模式\n// 4) 減少不必要的 useEffect 使用\n// @assignee frontend-team\n// @deadline 2025-02-05"
    },
    {
      "priority": "P2",
      "type": "REFACTOR",
      "description": "src/app/(app)/dashboard/page.tsx - 將 Firestore 資料抓取下沉至 Server 組件",
      "details": [
        "說明：目前多個 useMemo + useCollection 於 client 端，建議由父層 Server Page 取得序列化資料後以 props 傳入，",
        "並將 Dashboard 純化為展示，減少 client 邊界與效能負擔，提升 AI agent 可讀性。"
      ],
      "file": "docs\\代碼參考\\src\\app\\(app)\\dashboard\\page.tsx",
      "line": 3,
      "assignee": "ai",
      "context": "'use client';\n\n// TODO: [P2] REFACTOR src/app/(app)/dashboard/page.tsx - 將 Firestore 資料抓取下沉至 Server 組件\n// 說明：目前多個 useMemo + useCollection 於 client 端，建議由父層 Server Page 取得序列化資料後以 props 傳入，\n// 並將 Dashboard 純化為展示，減少 client 邊界與效能負擔，提升 AI agent 可讀性。\n// @assignee ai\nimport Link from 'next/link';\nimport {\n  Activity,\n  Backpack,\n  Grid3x3,\n  Star,"
    },
    {
      "priority": "P2",
      "type": "FEAT",
      "description": "src/app/actions/contracts.ts - 實作合約 AI 分析",
      "details": [
        "說明：整合 Genkit AI 或其他 AI 服務，輸出摘要與風險點"
      ],
      "file": "docs\\代碼參考\\src\\app\\actions\\contracts.ts",
      "line": 89,
      "context": "\nexport async function analyzeContract(spaceId: string, contractId: string) {\n  try {\n    // TODO: [P2] FEAT src/app/actions/contracts.ts - 實作合約 AI 分析\n    // 說明：整合 Genkit AI 或其他 AI 服務，輸出摘要與風險點\n    console.log('Analyzing contract:', contractId);\n    \n    return { success: true, data: { analysis: 'Contract analysis completed' } };\n  } catch (error) {\n    console.error('Error analyzing contract:', error);\n    return { success: false, error: 'Failed to analyze contract' };\n  }\n}"
    },
    {
      "priority": "P2",
      "type": "FEAT",
      "description": "src/app/actions/contracts.ts - 實作合約 PDF 生成",
      "details": [
        "說明：整合 PDF 生成服務（含標題、雙方、金額、日期、簽名）"
      ],
      "file": "docs\\代碼參考\\src\\app\\actions\\contracts.ts",
      "line": 102,
      "context": "\nexport async function generateContractPDF(spaceId: string, contractId: string) {\n  try {\n    // TODO: [P2] FEAT src/app/actions/contracts.ts - 實作合約 PDF 生成\n    // 說明：整合 PDF 生成服務（含標題、雙方、金額、日期、簽名）\n    console.log('Generating PDF for contract:', contractId);\n    \n    return { success: true, data: { pdfUrl: 'https://example.com/contract.pdf' } };\n  } catch (error) {\n    console.error('Error generating PDF:', error);\n    return { success: false, error: 'Failed to generate PDF' };\n  }\n}"
    },
    {
      "priority": "P2",
      "type": "CLEANUP",
      "description": "unused import (L39) [低認知]",
      "details": [
        "TODO: [P1] TYPING no-any (L192, L221) [低認知]",
        "TODO: [P1] HOOK deps (L365) [低認知]",
        "TODO: [P1] REFACTOR src/components/auth/auth-provider.tsx - 縮減責任邊界與資料下傳",
        "原則（Next.js App Router / Firebase）：",
        "- Firestore 聚合轉服務層；Provider 僅保留 userId/effectivePermissions 等最小必要。",
        "- 禁止在 render 期間做 I/O；mutation 走 Server Actions 或明確事件觸發。",
        "- 將 `PermissionGuard` 抽至更小 API（例如 useHasPermission(selector)）以便編譯期 tree-shaking。"
      ],
      "file": "docs\\代碼參考\\src\\components\\auth\\auth-provider.tsx",
      "line": 8,
      "assignee": "ai",
      "context": " */\n\n'use client';\n// TODO: [P2] CLEANUP unused import (L39) [低認知]\n// TODO: [P1] TYPING no-any (L192, L221) [低認知]\n// TODO: [P1] HOOK deps (L365) [低認知]\n// TODO: [P1] REFACTOR src/components/auth/auth-provider.tsx - 縮減責任邊界與資料下傳\n// 原則（Next.js App Router / Firebase）：\n// - Firestore 聚合轉服務層；Provider 僅保留 userId/effectivePermissions 等最小必要。\n// - 禁止在 render 期間做 I/O；mutation 走 Server Actions 或明確事件觸發。\n// - 將 `PermissionGuard` 抽至更小 API（例如 useHasPermission(selector)）以便編譯期 tree-shaking。\n// @assignee ai\n"
    },
    {
      "priority": "P2",
      "type": "REFACTOR",
      "description": "src/components/auth/auth-provider.tsx - 奧卡姆剃刀精簡權限/認證 Provider",
      "details": [
        "建議：",
        "1) 將 Firestore 讀取拆為最小 API（單一 fetchUserRoleAssignment），其餘聚合邏輯移至 service；Provider 僅保存必要狀態。",
        "2) 僅暴露最小 API（hasPermission / checkPermission / signIn / signOut），其餘輔助函式封裝內部。",
        "3) 避免渲染期副作用；所有 mutation 綁定事件或 Server Actions；避免將完整使用者資料下傳至 client。"
      ],
      "file": "docs\\代碼參考\\src\\components\\auth\\auth-provider.tsx",
      "line": 18,
      "context": "// - 將 `PermissionGuard` 抽至更小 API（例如 useHasPermission(selector)）以便編譯期 tree-shaking。\n// @assignee ai\n\n// TODO: [P2] REFACTOR src/components/auth/auth-provider.tsx - 奧卡姆剃刀精簡權限/認證 Provider\n// 建議：\n// 1) 將 Firestore 讀取拆為最小 API（單一 fetchUserRoleAssignment），其餘聚合邏輯移至 service；Provider 僅保存必要狀態。\n// 2) 僅暴露最小 API（hasPermission / checkPermission / signIn / signOut），其餘輔助函式封裝內部。\n// 3) 避免渲染期副作用；所有 mutation 綁定事件或 Server Actions；避免將完整使用者資料下傳至 client。\n\nimport React, { createContext, useContext, useState, useEffect, ReactNode, useCallback } from 'react';\nimport { \n  Permission, \n  UserRoleAssignment, "
    },
    {
      "priority": "P2",
      "type": "CLEANUP",
      "description": "unused imports/vars (L28, L41, L70, L88, L89, L134) [低認知]",
      "details": [
        "TODO: [P1] HOOK deps (L156) [低認知]",
        "TODO: [P2] REFACTOR src/components/auth/role-manager.tsx - 避免列表渲染期昂貴操作",
        "建議：",
        "- 將 roles/users 載入改為懶載（按需打開時再查詢）；表格僅顯示前幾個權限，其餘以 lazy 展開。",
        "- 對話框抽成小型子元件或同檔內聯，避免 props 鏈過深；重複邏輯 ≥3 次再抽象。",
        "- 權限檢查改用 `useAuth()` 的單一 selector，移除本檔重複 hasPermission 調用。"
      ],
      "file": "docs\\代碼參考\\src\\components\\auth\\role-manager.tsx",
      "line": 8,
      "assignee": "ai",
      "context": " */\n\n'use client';\n// TODO: [P2] CLEANUP unused imports/vars (L28, L41, L70, L88, L89, L134) [低認知]\n// TODO: [P1] HOOK deps (L156) [低認知]\n// TODO: [P2] REFACTOR src/components/auth/role-manager.tsx - 避免列表渲染期昂貴操作\n// 建議：\n// - 將 roles/users 載入改為懶載（按需打開時再查詢）；表格僅顯示前幾個權限，其餘以 lazy 展開。\n// - 對話框抽成小型子元件或同檔內聯，避免 props 鏈過深；重複邏輯 ≥3 次再抽象。\n// - 權限檢查改用 `useAuth()` 的單一 selector，移除本檔重複 hasPermission 調用。\n// @assignee ai\n\n// TODO: [P2] REFACTOR src/components/auth/role-manager.tsx - 奧卡姆剃刀精簡角色管理"
    },
    {
      "priority": "P2",
      "type": "REFACTOR",
      "description": "src/components/auth/role-manager.tsx - 避免列表渲染期昂貴操作",
      "details": [
        "建議：",
        "- 將 roles/users 載入改為懶載（按需打開時再查詢）；表格僅顯示前幾個權限，其餘以 lazy 展開。",
        "- 對話框抽成小型子元件或同檔內聯，避免 props 鏈過深；重複邏輯 ≥3 次再抽象。",
        "- 權限檢查改用 `useAuth()` 的單一 selector，移除本檔重複 hasPermission 調用。"
      ],
      "file": "docs\\代碼參考\\src\\components\\auth\\role-manager.tsx",
      "line": 10,
      "assignee": "ai",
      "context": "'use client';\n// TODO: [P2] CLEANUP unused imports/vars (L28, L41, L70, L88, L89, L134) [低認知]\n// TODO: [P1] HOOK deps (L156) [低認知]\n// TODO: [P2] REFACTOR src/components/auth/role-manager.tsx - 避免列表渲染期昂貴操作\n// 建議：\n// - 將 roles/users 載入改為懶載（按需打開時再查詢）；表格僅顯示前幾個權限，其餘以 lazy 展開。\n// - 對話框抽成小型子元件或同檔內聯，避免 props 鏈過深；重複邏輯 ≥3 次再抽象。\n// - 權限檢查改用 `useAuth()` 的單一 selector，移除本檔重複 hasPermission 調用。\n// @assignee ai\n\n// TODO: [P2] REFACTOR src/components/auth/role-manager.tsx - 奧卡姆剃刀精簡角色管理\n// 建議：\n// 1) 合併 Firestore 讀取：批量查詢與最小欄位投影；以單一 hook/context 管理 users/roles 狀態，移除重複 useState。"
    },
    {
      "priority": "P2",
      "type": "REFACTOR",
      "description": "src/components/auth/role-manager.tsx - 奧卡姆剃刀精簡角色管理",
      "details": [
        "建議：",
        "1) 合併 Firestore 讀取：批量查詢與最小欄位投影；以單一 hook/context 管理 users/roles 狀態，移除重複 useState。",
        "2) 僅在互動時載入詳情（lazy/load-on-demand），表格只顯示最少欄位；避免在列表渲染時計算聚合。",
        "3) 將對話框組件移至同一檔內的輕量內聯或共用子目錄；重複出現 ≥3 次的表單行為再抽象。",
        "4) 權限判斷集中在 `useAuth()` 暴露的單一 selector，避免在本檔重複 hasPermission。"
      ],
      "file": "docs\\代碼參考\\src\\components\\auth\\role-manager.tsx",
      "line": 17,
      "context": "// - 權限檢查改用 `useAuth()` 的單一 selector，移除本檔重複 hasPermission 調用。\n// @assignee ai\n\n// TODO: [P2] REFACTOR src/components/auth/role-manager.tsx - 奧卡姆剃刀精簡角色管理\n// 建議：\n// 1) 合併 Firestore 讀取：批量查詢與最小欄位投影；以單一 hook/context 管理 users/roles 狀態，移除重複 useState。\n// 2) 僅在互動時載入詳情（lazy/load-on-demand），表格只顯示最少欄位；避免在列表渲染時計算聚合。\n// 3) 將對話框組件移至同一檔內的輕量內聯或共用子目錄；重複出現 ≥3 次的表單行為再抽象。\n// 4) 權限判斷集中在 `useAuth()` 暴露的單一 selector，避免在本檔重複 hasPermission。\n\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';"
    },
    {
      "priority": "P2",
      "type": "REFACTOR",
      "description": "src/components/auth/role-manager.tsx:28 - 清理未使用的導入",
      "details": [
        "問題：'Switch' 已導入但從未使用",
        "影響：增加 bundle 大小，影響性能",
        "建議：移除未使用的導入或添加下劃線前綴表示有意未使用"
      ],
      "file": "docs\\代碼參考\\src\\components\\auth\\role-manager.tsx",
      "line": 31,
      "assignee": "frontend",
      "context": "import { Label } from '@/components/ui/label';\nimport { Badge } from '@/components/ui/badge';\n\n// TODO: [P2] REFACTOR src/components/auth/role-manager.tsx:28 - 清理未使用的導入\n// 問題：'Switch' 已導入但從未使用\n// 影響：增加 bundle 大小，影響性能\n// 建議：移除未使用的導入或添加下劃線前綴表示有意未使用\n// @assignee frontend-team\n\nimport { \n  Dialog, \n  DialogContent, \n  DialogHeader, "
    },
    {
      "priority": "P2",
      "type": "REFACTOR",
      "description": "src/components/auth/role-manager.tsx:34 - 清理未使用的導入",
      "details": [
        "問題：'DialogTrigger' 已導入但從未使用",
        "影響：增加 bundle 大小，影響性能",
        "建議：移除未使用的導入或添加下劃線前綴表示有意未使用"
      ],
      "file": "docs\\代碼參考\\src\\components\\auth\\role-manager.tsx",
      "line": 44,
      "assignee": "frontend",
      "context": "  DialogTitle \n} from '@/components/ui/dialog';\n\n// TODO: [P2] REFACTOR src/components/auth/role-manager.tsx:34 - 清理未使用的導入\n// 問題：'DialogTrigger' 已導入但從未使用\n// 影響：增加 bundle 大小，影響性能\n// 建議：移除未使用的導入或添加下劃線前綴表示有意未使用\n// @assignee frontend-team\nimport { \n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,"
    },
    {
      "priority": "P2",
      "type": "REFACTOR",
      "description": "src/components/auth/role-manager.tsx:57 - 清理未使用的導入",
      "details": [
        "問題：'Settings' 已導入但從未使用",
        "影響：增加 bundle 大小，影響性能",
        "建議：移除未使用的導入或添加下劃線前綴表示有意未使用"
      ],
      "file": "docs\\代碼參考\\src\\components\\auth\\role-manager.tsx",
      "line": 73,
      "assignee": "frontend",
      "context": "  Search\n} from 'lucide-react';\n\n// TODO: [P2] REFACTOR src/components/auth/role-manager.tsx:57 - 清理未使用的導入\n// 問題：'Settings' 已導入但從未使用\n// 影響：增加 bundle 大小，影響性能\n// 建議：移除未使用的導入或添加下劃線前綴表示有意未使用\n// @assignee frontend-team\n\nimport { useAuth } from './auth-provider';\n\n// TODO: [P2] REFACTOR src/components/auth/role-manager.tsx:61 - 清理未使用的導入\n// 問題：'roleManagementService' 已導入但從未使用"
    },
    {
      "priority": "P2",
      "type": "REFACTOR",
      "description": "src/components/auth/role-manager.tsx:61 - 清理未使用的導入",
      "details": [
        "問題：'roleManagementService' 已導入但從未使用",
        "影響：增加 bundle 大小，影響性能",
        "建議：移除未使用的導入或添加下劃線前綴表示有意未使用"
      ],
      "file": "docs\\代碼參考\\src\\components\\auth\\role-manager.tsx",
      "line": 81,
      "assignee": "frontend",
      "context": "\nimport { useAuth } from './auth-provider';\n\n// TODO: [P2] REFACTOR src/components/auth/role-manager.tsx:61 - 清理未使用的導入\n// 問題：'roleManagementService' 已導入但從未使用\n// 影響：增加 bundle 大小，影響性能\n// 建議：移除未使用的導入或添加下劃線前綴表示有意未使用\n// @assignee frontend-team\n\nimport { Permission } from '@/lib/types-unified';\n\n// TODO: [P2] REFACTOR src/components/auth/role-manager.tsx:62 - 清理未使用的導入\n// 問題：'UserRoleAssignment' 已導入但從未使用"
    },
    {
      "priority": "P2",
      "type": "REFACTOR",
      "description": "src/components/auth/role-manager.tsx:62 - 清理未使用的導入",
      "details": [
        "問題：'UserRoleAssignment' 已導入但從未使用",
        "影響：增加 bundle 大小，影響性能",
        "建議：移除未使用的導入或添加下劃線前綴表示有意未使用"
      ],
      "file": "docs\\代碼參考\\src\\components\\auth\\role-manager.tsx",
      "line": 89,
      "assignee": "frontend",
      "context": "\nimport { Permission } from '@/lib/types-unified';\n\n// TODO: [P2] REFACTOR src/components/auth/role-manager.tsx:62 - 清理未使用的導入\n// 問題：'UserRoleAssignment' 已導入但從未使用\n// 影響：增加 bundle 大小，影響性能\n// 建議：移除未使用的導入或添加下劃線前綴表示有意未使用\n// @assignee frontend-team\nimport { \n  getFirestore, \n  collection, \n  doc, \n  getDocs, "
    },
    {
      "priority": "P2",
      "type": "FEAT",
      "description": "src/components/features/organizations/components/roles/create-role-dialog.tsx - 實現角色創建 API 調用",
      "details": [],
      "file": "docs\\代碼參考\\src\\components\\features\\organizations\\components\\roles\\create-role-dialog.tsx",
      "line": 70,
      "context": "  const onSubmit = async (data: RoleFormData) => {\n    setIsLoading(true);\n    try {\n      // TODO: [P2] FEAT src/components/features/organizations/components/roles/create-role-dialog.tsx - 實現角色創建 API 調用\n      console.log('Creating role for organization:', organizationId, data);\n      // @assignee dev\n      \n      // Simulate API call\n      await new Promise(resolve => setTimeout(resolve, 1000));\n      \n      reset();\n      onOpenChange(false);\n    } catch (error) {"
    },
    {
      "priority": "P2",
      "type": "FEAT",
      "description": "src/components/features/organizations/components/roles/role-list.tsx - 實現權限更新邏輯",
      "details": [],
      "file": "docs\\代碼參考\\src\\components\\features\\organizations\\components\\roles\\role-list.tsx",
      "line": 169,
      "context": "  );\n\n  const handlePermissionToggle = (roleId: string, permission: keyof Role['permissions']) => {\n    // TODO: [P2] FEAT src/components/features/organizations/components/roles/role-list.tsx - 實現權限更新邏輯\n    console.log(`Toggle ${permission} for role ${roleId}`);\n    // @assignee dev\n  };\n\n  const handleAccessLevelChange = (roleId: string, accessLevel: string) => {\n    // TODO: [P2] FEAT src/components/features/organizations/components/roles/role-list.tsx - 實現訪問級別更新邏輯\n    console.log(`Change access level to ${accessLevel} for role ${roleId}`);\n    // @assignee dev\n  };"
    },
    {
      "priority": "P2",
      "type": "FEAT",
      "description": "src/components/features/organizations/components/roles/role-list.tsx - 實現訪問級別更新邏輯",
      "details": [],
      "file": "docs\\代碼參考\\src\\components\\features\\organizations\\components\\roles\\role-list.tsx",
      "line": 175,
      "context": "  };\n\n  const handleAccessLevelChange = (roleId: string, accessLevel: string) => {\n    // TODO: [P2] FEAT src/components/features/organizations/components/roles/role-list.tsx - 實現訪問級別更新邏輯\n    console.log(`Change access level to ${accessLevel} for role ${roleId}`);\n    // @assignee dev\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>"
    },
    {
      "priority": "P2",
      "type": "FEAT",
      "description": "src/components/features/spaces/components/acceptance/initiate-acceptance-flow.tsx - 實作創建驗收 API 呼叫",
      "details": [],
      "file": "docs\\代碼參考\\src\\components\\features\\spaces\\components\\acceptance\\initiate-acceptance-flow.tsx",
      "line": 74,
      "context": "  const onSubmit = async (data: InitiateAcceptanceFormValues) => {\n    setIsLoading(true);\n    try {\n      // TODO: [P2] FEAT src/components/features/spaces/components/acceptance/initiate-acceptance-flow.tsx - 實作創建驗收 API 呼叫\n      console.log('Creating acceptance item:', { spaceId, ...data });\n      // @assignee dev\n      await new Promise(resolve => setTimeout(resolve, 1000)); // Simulate API call\n      \n      const newAcceptance = {\n        id: Date.now().toString(),\n        ...data,\n        status: 'pending' as const,\n        requester: { id: 'current-user', name: 'Current User' },"
    },
    {
      "priority": "P2",
      "type": "FEAT",
      "description": "src/components/features/spaces/components/contracts/contract-details.tsx - 實現合約下載邏輯",
      "details": [],
      "file": "docs\\代碼參考\\src\\components\\features\\spaces\\components\\contracts\\contract-details.tsx",
      "line": 103,
      "context": "  };\n\n  const handleDownload = () => {\n    // TODO: [P2] FEAT src/components/features/spaces/components/contracts/contract-details.tsx - 實現合約下載邏輯\n    console.log('Downloading contract:', contract.title);\n    // @assignee dev\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"max-w-4xl max-h-[90vh]\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center gap-2\">"
    },
    {
      "priority": "P2",
      "type": "REFACTOR",
      "description": "src/components/features/spaces/components/contracts/contract-list.tsx - 奧卡姆剃刀精簡列表",
      "details": [
        "建議：",
        "1) 將統計（total/pending/active）移至 memo 或上層 hook，避免在渲染期反覆計算。",
        "2) 類型圖示以 CSS/variant 取代多分支；最小化 UI 條件分支。",
        "3) 詳情 `ContractDetails` 採 lazy import（動態載入），減少首屏負擔。"
      ],
      "file": "docs\\代碼參考\\src\\components\\features\\spaces\\components\\contracts\\contract-list.tsx",
      "line": 14,
      "context": "// ✅ [COMPLETED] 已清理未使用的重命名導入：FileText as _FileText, DollarSign as _DollarSign\n// 現代化改進：移除未使用的導入，降低認知負擔，減少 bundle 大小\n// 建議：配置 ESLint no-unused-vars 規則自動檢測未使用的導入\n// TODO: [P2] REFACTOR src/components/features/spaces/components/contracts/contract-list.tsx - 奧卡姆剃刀精簡列表\n// 建議：\n// 1) 將統計（total/pending/active）移至 memo 或上層 hook，避免在渲染期反覆計算。\n// 2) 類型圖示以 CSS/variant 取代多分支；最小化 UI 條件分支。\n// 3) 詳情 `ContractDetails` 採 lazy import（動態載入），減少首屏負擔。\nimport { CreateContractDialog } from './create-contract-dialog';\nimport { ContractDetails } from './contract-details';\nimport { useState } from 'react';\n\ninterface Contract {"
    },
    {
      "priority": "P2",
      "type": "REFACTOR",
      "description": "src/components/features/spaces/components/file-explorer/context-menu.tsx - 將靜態選單結構抽為常數",
      "details": [
        "說明：menuItems 可抽成常數與型別，避免於 render 期建構大型物件；保留動作回呼介面。",
        "影響：無功能變動、降低渲染負擔與閱讀成本。"
      ],
      "file": "docs\\代碼參考\\src\\components\\features\\spaces\\components\\file-explorer\\context-menu.tsx",
      "line": 7,
      "assignee": "ai",
      "context": " * selected item. A separate context menu for the toolbar is also defined here.\n */\n'use client';\n// TODO: [P2] REFACTOR src/components/features/spaces/components/file-explorer/context-menu.tsx - 將靜態選單結構抽為常數\n// 說明：menuItems 可抽成常數與型別，避免於 render 期建構大型物件；保留動作回呼介面。\n// 影響：無功能變動、降低渲染負擔與閱讀成本。\n// @assignee ai\n\nimport React from 'react';\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,"
    },
    {
      "priority": "P2",
      "type": "VAN",
      "description": "- 現代化類型定義，移除不必要的類型斷言",
      "details": [
        "問題：column.id as SortField 和 checked as boolean 需要類型斷言",
        "解決方案：定義更精確的類型，使用類型守衛替代類型斷言",
        "現代化建議：使用 const assertions 和聯合類型提升類型安全",
        "效能影響：無，但提升類型安全性和代碼可讀性",
        "相關受影響檔案：無（內部重構）"
      ],
      "file": "docs\\代碼參考\\src\\components\\features\\spaces\\components\\file-explorer\\file-table.tsx",
      "line": 41,
      "context": "  onItemAction: (item: FileItem, action: string) => void;\n}\n\n// TODO: [P2] VAN - 現代化類型定義，移除不必要的類型斷言\n// 問題：column.id as SortField 和 checked as boolean 需要類型斷言\n// 解決方案：定義更精確的類型，使用類型守衛替代類型斷言\n// 現代化建議：使用 const assertions 和聯合類型提升類型安全\n// 效能影響：無，但提升類型安全性和代碼可讀性\n// 相關受影響檔案：無（內部重構）\ntype SortField = 'name' | 'description' | 'version' | 'indicator' | 'tag' | 'issue' | 'size' | 'lastUpdate' | 'updater' | 'versionContributor' | 'reviewStatus';\ntype SortDirection = 'asc' | 'desc';\n\nexport function FileTable({ files, selectedItems, onSelectionChange, onItemClick, onItemAction }: FileTableProps) {"
    },
    {
      "priority": "P2",
      "type": "REFACTOR",
      "description": "src/components/features/spaces/components/file-explorer/services/file-preview-service.ts - 強化型別與錯誤處理",
      "details": [
        "說明：為 handleError 增加類型守衛，並將 MIME 對照表抽出常數；可提供 `isPreviewError` type guard。",
        "目標：提升型別安全與可測性，降低 AI agent 理解成本。"
      ],
      "file": "docs\\代碼參考\\src\\components\\features\\spaces\\components\\file-explorer\\services\\file-preview-service.ts",
      "line": 7,
      "assignee": "ai",
      "context": " * Provides a unified interface for different file preview libraries.\n */\n'use client';\n// TODO: [P2] REFACTOR src/components/features/spaces/components/file-explorer/services/file-preview-service.ts - 強化型別與錯誤處理\n// 說明：為 handleError 增加類型守衛，並將 MIME 對照表抽出常數；可提供 `isPreviewError` type guard。\n// 目標：提升型別安全與可測性，降低 AI agent 理解成本。\n// @assignee ai\n\nimport { type FileItem } from '../folder-tree';\n\nexport interface PreviewDocument {\n  uri: string;\n  fileName: string;"
    },
    {
      "priority": "P2",
      "type": "FEAT",
      "description": "src/components/features/spaces/components/issues/create-issue-form.tsx - 實作創建問題 API 呼叫",
      "details": [],
      "file": "docs\\代碼參考\\src\\components\\features\\spaces\\components\\issues\\create-issue-form.tsx",
      "line": 69,
      "context": "  const onSubmit = async (data: CreateIssueFormValues) => {\n    setIsLoading(true);\n    try {\n      // TODO: [P2] FEAT src/components/features/spaces/components/issues/create-issue-form.tsx - 實作創建問題 API 呼叫\n      console.log('Creating issue:', { spaceId, ...data });\n      // @assignee dev\n      await new Promise(resolve => setTimeout(resolve, 1000)); // Simulate API call\n      \n      const newIssue = {\n        id: Date.now().toString(),\n        ...data,\n        status: 'open' as const,\n        reporter: { id: 'current-user', name: 'Current User' },"
    },
    {
      "priority": "P2",
      "type": "FEAT",
      "description": "src/components/features/spaces/components/overview/hooks/use-dashboard-data.ts - 替換為實際的 API 調用",
      "details": [
        "這裡使用模擬數據"
      ],
      "file": "docs\\代碼參考\\src\\components\\features\\spaces\\components\\overview\\hooks\\use-dashboard-data.ts",
      "line": 41,
      "assignee": "dev",
      "context": "\n  // 獲取儀表板統計數據\n  const fetchStats = useCallback(async (): Promise<DashboardStats> => {\n    // TODO: [P2] FEAT src/components/features/spaces/components/overview/hooks/use-dashboard-data.ts - 替換為實際的 API 調用\n    // 這裡使用模擬數據\n    // @assignee dev\n    return new Promise((resolve) => {\n      setTimeout(() => {\n        resolve({\n          members: Math.floor(Math.random() * 50) + 10,\n          files: Math.floor(Math.random() * 200) + 50,\n          issues: Math.floor(Math.random() * 20) + 2,\n          lastActivity: '2 hours ago',"
    },
    {
      "priority": "P2",
      "type": "FEAT",
      "description": "src/components/features/spaces/components/overview/hooks/use-dashboard-data.ts - 替換為實際的 API 調用",
      "details": [
        "這裡使用模擬數據"
      ],
      "file": "docs\\代碼參考\\src\\components\\features\\spaces\\components\\overview\\hooks\\use-dashboard-data.ts",
      "line": 60,
      "assignee": "dev",
      "context": "\n  // 獲取活動數據\n  const fetchActivities = useCallback(async (): Promise<ActivityItem[]> => {\n    // TODO: [P2] FEAT src/components/features/spaces/components/overview/hooks/use-dashboard-data.ts - 替換為實際的 API 調用\n    // 這裡使用模擬數據\n    // @assignee dev\n    return new Promise((resolve) => {\n      setTimeout(() => {\n        const mockActivities: ActivityItem[] = [\n          {\n            id: '1',\n            type: 'file_upload',\n            user: 'John Doe',"
    },
    {
      "priority": "P2",
      "type": "VAN",
      "description": "- 現代化類型斷言，使用更安全的類型守衛",
      "details": [
        "問題：value as ViewMode['type'] 使用類型斷言，可能存在類型不安全",
        "解決方案：使用類型守衛函數驗證 value 是否為有效的 ViewMode['type']",
        "現代化建議：const isValidViewMode = (val: string): val is ViewMode['type'] => VIEW_MODES.some(m => m.type === val)",
        "效能影響：無，但提升類型安全性和運行時安全性",
        "相關受影響檔案：無（內部重構，不影響外部接口）"
      ],
      "file": "docs\\代碼參考\\src\\components\\features\\spaces\\components\\participants\\view-toggle.tsx",
      "line": 53,
      "context": "        value={viewMode}\n        onValueChange={(value) => {\n          if (value) {\n            // TODO: [P2] VAN - 現代化類型斷言，使用更安全的類型守衛\n            // 問題：value as ViewMode['type'] 使用類型斷言，可能存在類型不安全\n            // 解決方案：使用類型守衛函數驗證 value 是否為有效的 ViewMode['type']\n            // 現代化建議：const isValidViewMode = (val: string): val is ViewMode['type'] => VIEW_MODES.some(m => m.type === val)\n            // 效能影響：無，但提升類型安全性和運行時安全性\n            // 相關受影響檔案：無（內部重構，不影響外部接口）\n            onViewModeChange(value as ViewMode['type']);\n          }\n        }}\n        className=\"border rounded-lg p-1\""
    },
    {
      "priority": "P2",
      "type": "VAN",
      "description": "- 現代化類型斷言，使用更安全的鍵值訪問",
      "details": [
        "問題：mode.icon as keyof typeof ICON_MAP 使用類型斷言，可能存在鍵值不存在的情況",
        "解決方案：使用 Object.hasOwn() 或 in 運算符驗證鍵值存在",
        "現代化建議：const IconComponent = Object.hasOwn(ICON_MAP, mode.icon) ? ICON_MAP[mode.icon] : DefaultIcon",
        "效能影響：無，但提升類型安全性和運行時安全性",
        "相關受影響檔案：無（內部重構，不影響外部接口）"
      ],
      "file": "docs\\代碼參考\\src\\components\\features\\spaces\\components\\participants\\view-toggle.tsx",
      "line": 65,
      "context": "        className=\"border rounded-lg p-1\"\n      >\n        {VIEW_MODES.map((mode) => {\n          // TODO: [P2] VAN - 現代化類型斷言，使用更安全的鍵值訪問\n          // 問題：mode.icon as keyof typeof ICON_MAP 使用類型斷言，可能存在鍵值不存在的情況\n          // 解決方案：使用 Object.hasOwn() 或 in 運算符驗證鍵值存在\n          // 現代化建議：const IconComponent = Object.hasOwn(ICON_MAP, mode.icon) ? ICON_MAP[mode.icon] : DefaultIcon\n          // 效能影響：無，但提升類型安全性和運行時安全性\n          // 相關受影響檔案：無（內部重構，不影響外部接口）\n          const IconComponent = ICON_MAP[mode.icon as keyof typeof ICON_MAP];\n          \n          return (\n            <ToggleGroupItem"
    },
    {
      "priority": "P2",
      "type": "VAN",
      "description": "- 現代化 reduce 類型推斷",
      "details": [
        "問題：使用 as Record<string, ChecklistItem[]> 類型斷言",
        "解決方案：使用更精確的類型定義或類型守衛",
        "現代化建議：考慮使用 Map 或更精確的類型定義",
        "效能影響：無，但提升類型安全性",
        "相關受影響檔案：無（內部重構）"
      ],
      "file": "docs\\代碼參考\\src\\components\\features\\spaces\\components\\quality\\checklist.tsx",
      "line": 137,
      "context": "    }\n    acc[item.category].push(item);\n    return acc;\n  }, {} as Record<string, ChecklistItem[]>); // TODO: [P2] VAN - 現代化 reduce 類型推斷\n  // 問題：使用 as Record<string, ChecklistItem[]> 類型斷言\n  // 解決方案：使用更精確的類型定義或類型守衛\n  // 現代化建議：考慮使用 Map 或更精確的類型定義\n  // 效能影響：無，但提升類型安全性\n  // 相關受影響檔案：無（內部重構）\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Progress Overview */}"
    },
    {
      "priority": "P2",
      "type": "FEAT",
      "description": "src/components/features/spaces/components/quality/create-checklist-template.tsx - 實現創建模板 API 調用",
      "details": [],
      "file": "docs\\代碼參考\\src\\components\\features\\spaces\\components\\quality\\create-checklist-template.tsx",
      "line": 88,
      "context": "  const onSubmit = async (data: ChecklistTemplateFormValues) => {\n    setIsLoading(true);\n    try {\n      // TODO: [P2] FEAT src/components/features/spaces/components/quality/create-checklist-template.tsx - 實現創建模板 API 調用\n      console.log('Creating checklist template:', { spaceId, ...data });\n      // @assignee dev\n      await new Promise(resolve => setTimeout(resolve, 1000)); // Simulate API call\n      \n      const newTemplate = {\n        id: Date.now().toString(),\n        ...data,\n        createdAt: new Date(),\n        createdBy: 'current-user',"
    },
    {
      "priority": "P2",
      "type": "FEAT",
      "description": "src/components/features/spaces/components/report/create-report-dialog.tsx - 實現創建報告 API 調用",
      "details": [],
      "file": "docs\\代碼參考\\src\\components\\features\\spaces\\components\\report\\create-report-dialog.tsx",
      "line": 90,
      "context": "  const onSubmit = async (data: CreateReportFormValues) => {\n    setIsLoading(true);\n    try {\n      // TODO: [P2] FEAT src/components/features/spaces/components/report/create-report-dialog.tsx - 實現創建報告 API 調用\n      console.log('Creating report:', { spaceId, ...data });\n      // @assignee dev\n      await new Promise(resolve => setTimeout(resolve, 2000)); // Simulate API call\n      \n      const newReport = {\n        id: Date.now().toString(),\n        ...data,\n        status: 'generating' as const,\n        createdAt: new Date(),"
    },
    {
      "priority": "P2",
      "type": "FEAT",
      "description": "src/components/features/spaces/components/report/report-dashboard.tsx - 實現實際下載邏輯",
      "details": [],
      "file": "docs\\代碼參考\\src\\components\\features\\spaces\\components\\report\\report-dashboard.tsx",
      "line": 124,
      "context": "\n  const handleDownload = (report: Report) => {\n    if (report.downloadUrl) {\n      // TODO: [P2] FEAT src/components/features/spaces/components/report/report-dashboard.tsx - 實現實際下載邏輯\n      console.log('Downloading report:', report.title);\n      // @assignee dev\n      window.open(report.downloadUrl, '_blank');\n    }\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">"
    },
    {
      "priority": "P2",
      "type": "FEAT",
      "description": "src/components/features/spaces/components/report/report-viewer.tsx - 實現實際下載邏輯",
      "details": [],
      "file": "docs\\代碼參考\\src\\components\\features\\spaces\\components\\report\\report-viewer.tsx",
      "line": 77,
      "context": "\n  const handleDownload = () => {\n    if (report.downloadUrl) {\n      // TODO: [P2] FEAT src/components/features/spaces/components/report/report-viewer.tsx - 實現實際下載邏輯\n      console.log('Downloading report:', report.title);\n      // @assignee dev\n      window.open(report.downloadUrl, '_blank');\n    }\n  };\n\n  // Mock report content based on type\n  const getReportContent = () => {\n    switch (report.type) {"
    },
    {
      "priority": "P2",
      "type": "REFACTOR",
      "description": "src/components/features/spaces/hooks/use-file-actions.ts - 奧卡姆剃刀精簡檔案動作 Hook",
      "details": [
        "建議：",
        "1) 將 fileOperations 相關依賴集中於單一 factory/context，移除多處 useCallback 依賴項導致的 hooks 警告。",
        "2) 僅回傳實際用到的最小 API（如 download/preview/delete），避免暴露整包操作以降低重渲染。",
        "3) 針對重複邏輯（權限/錯誤處理/Toast）抽為 util，避免每個 action 內重複。"
      ],
      "file": "docs\\代碼參考\\src\\components\\features\\spaces\\hooks\\use-file-actions.ts",
      "line": 8,
      "context": " * and errors. This simplifies file management logic in the UI components.\n */\n'use client';\n// TODO: [P2] REFACTOR src/components/features/spaces/hooks/use-file-actions.ts - 奧卡姆剃刀精簡檔案動作 Hook\n// 建議：\n// 1) 將 fileOperations 相關依賴集中於單一 factory/context，移除多處 useCallback 依賴項導致的 hooks 警告。\n// 2) 僅回傳實際用到的最小 API（如 download/preview/delete），避免暴露整包操作以降低重渲染。\n// 3) 針對重複邏輯（權限/錯誤處理/Toast）抽為 util，避免每個 action 內重複。\n\nimport { useState, useCallback } from 'react';\nimport { useToast } from '@/hooks/use-toast';\nimport { useFileOperations, type FileItem as FileActionItem } from './use-file-operations';\n"
    },
    {
      "priority": "P2",
      "type": "REFACTOR",
      "description": "src/components/ui/chart.tsx - 奧卡姆剃刀精簡圖表層",
      "details": [
        "建議：",
        "1) 以 props 驅動、單一責任：只渲染必要視圖，不內嵌資料轉換/來源選擇。",
        "2) 將重複的 formatter/mapper 提升為 util，避免在多圖表內重複實作。",
        "3) 禁止於渲染期間觸發副作用或資料拉取，將副作用遷至上層 hook。"
      ],
      "file": "docs\\代碼參考\\src\\components\\ui\\chart.tsx",
      "line": 1,
      "context": "// TODO: [P2] REFACTOR src/components/ui/chart.tsx - 奧卡姆剃刀精簡圖表層\n// 建議：\n// 1) 以 props 驅動、單一責任：只渲染必要視圖，不內嵌資料轉換/來源選擇。\n// 2) 將重複的 formatter/mapper 提升為 util，避免在多圖表內重複實作。\n// 3) 禁止於渲染期間觸發副作用或資料拉取，將副作用遷至上層 hook。\n\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n"
    },
    {
      "priority": "P2",
      "type": "REFACTOR",
      "description": "src/firebase/firestore/use-collection.tsx - 控制快取與依賴穩定，降低重新訂閱",
      "details": [
        "建議：",
        "- 呼叫端須 useMemo 穩定 Query/Ref，hook 內可檢查相等性避免過度 unsubscribe/subscribe。",
        "- 提供選項：{ listen?: boolean; cache?: 'no-store'|'memory' }，與 App Router 快取策略對齊。",
        "- 僅回傳必要欄位，錯誤統一由 errorEmitter 傳遞。"
      ],
      "file": "docs\\代碼參考\\src\\firebase\\firestore\\use-collection.tsx",
      "line": 37,
      "context": " * The Firestore CollectionReference or Query. Waits if null/undefined.\n * @returns {UseCollectionResult<T>} Object with data, isLoading, error.\n */\n// TODO: [P2] REFACTOR src/firebase/firestore/use-collection.tsx - 控制快取與依賴穩定，降低重新訂閱\n// 建議：\n// - 呼叫端須 useMemo 穩定 Query/Ref，hook 內可檢查相等性避免過度 unsubscribe/subscribe。\n// - 提供選項：{ listen?: boolean; cache?: 'no-store'|'memory' }，與 App Router 快取策略對齊。\n// - 僅回傳必要欄位，錯誤統一由 errorEmitter 傳遞。\nexport function useCollection<T = DocumentData>(\n    targetRefOrQuery: CollectionReference<DocumentData> | Query<DocumentData> | null | undefined,\n): UseCollectionResult<T> {\n  type ResultItemType = WithId<T>;\n  type StateDataType = ResultItemType[] | null;"
    },
    {
      "priority": "P2",
      "type": "REFACTOR",
      "description": "src/hooks/use-permissions.ts - 奧卡姆剃刀精簡權限 Hook",
      "details": [
        "建議：",
        "1) 將 checkOrganizationPermissionInternal 暴露為單一 memoized selector，避免多處 useCallback 依賴分散。",
        "2) 僅回傳呼叫端實際需要的最小資料（布林/字串），降低重渲染與心智負擔。",
        "3) 以穩定依賴陣列與衍生值 memo 化，移除多餘依賴導致的 hooks 警告。"
      ],
      "file": "docs\\代碼參考\\src\\hooks\\use-permissions.ts",
      "line": 2,
      "context": "'use client';\n// TODO: [P2] REFACTOR src/hooks/use-permissions.ts - 奧卡姆剃刀精簡權限 Hook\n// 建議：\n// 1) 將 checkOrganizationPermissionInternal 暴露為單一 memoized selector，避免多處 useCallback 依賴分散。\n// 2) 僅回傳呼叫端實際需要的最小資料（布林/字串），降低重渲染與心智負擔。\n// 3) 以穩定依賴陣列與衍生值 memo 化，移除多餘依賴導致的 hooks 警告。\n\nimport { useState, useCallback, useMemo } from 'react';\nimport { Permission, PermissionCheckResult, UserRoleAssignment } from '@/lib/types-unified';\nimport { useAuth } from '@/components/auth/auth-provider';\nimport { roleManagementService } from '@/lib/role-management';"
    },
    {
      "priority": "P2",
      "type": "REFACTOR",
      "description": "src/lib/role-management.ts - 合併查詢與快取，僅回傳最小資料",
      "details": [
        "指南：",
        "- 提供 in-memory 快取（弱映射）以減少 getRoleDefinition 重複查詢；",
        "- checkPermission 與 getAllRoleDefinitions 共享快取；",
        "- 僅暴露 id/name/permissions；將非必要欄位延後查詢。"
      ],
      "file": "docs\\代碼參考\\src\\lib\\role-management.ts",
      "line": 112,
      "assignee": "ai",
      "context": "  },\n};\n\n// TODO: [P2] REFACTOR src/lib/role-management.ts - 合併查詢與快取，僅回傳最小資料\n// 指南：\n// - 提供 in-memory 快取（弱映射）以減少 getRoleDefinition 重複查詢；\n// - checkPermission 與 getAllRoleDefinitions 共享快取；\n// - 僅暴露 id/name/permissions；將非必要欄位延後查詢。\n// @assignee ai\nexport const roleManagementService = {\n  // 初始化 Firestore\n  db: getFirestore(initializeFirebase().firebaseApp),\n  // TODO: [P2] REFACTOR src/lib/role-management.ts - 奧卡姆剃刀精簡服務層"
    },
    {
      "priority": "P2",
      "type": "REFACTOR",
      "description": "src/lib/role-management.ts - 奧卡姆剃刀精簡服務層",
      "details": [
        "建議：",
        "1) 以 pure function + 最小輸出為主，避免在 service 層維持隱藏狀態。",
        "2) 將 getAllRoleDefinitions 與 checkPermission 的重複查詢合併/快取；避免重複 Firestore round-trip。",
        "3) 僅回傳渲染所需欄位（id/name/permissions），其餘細節延後查詢。"
      ],
      "file": "docs\\代碼參考\\src\\lib\\role-management.ts",
      "line": 121,
      "context": "export const roleManagementService = {\n  // 初始化 Firestore\n  db: getFirestore(initializeFirebase().firebaseApp),\n  // TODO: [P2] REFACTOR src/lib/role-management.ts - 奧卡姆剃刀精簡服務層\n  // 建議：\n  // 1) 以 pure function + 最小輸出為主，避免在 service 層維持隱藏狀態。\n  // 2) 將 getAllRoleDefinitions 與 checkPermission 的重複查詢合併/快取；避免重複 Firestore round-trip。\n  // 3) 僅回傳渲染所需欄位（id/name/permissions），其餘細節延後查詢。\n\n  // 獲取角色定義\n  getRoleDefinition: async (roleId: string): Promise<RoleDefinition | null> => {\n    try {\n      // 首先檢查系統角色"
    }
  ],
  "aiInstructions": "# AI Agent 工作指令\n## 📊 專案狀態\n- 總 TODO 數量: 56\n- 🔴 緊急項目: 5\n## ⚠️ 立即處理（P0 或已過期）\n### 1. REFACTOR: src/components/features/spaces/components/ - 減少過度抽象的組件層級\n- 檔案: `docs\\代碼參考\\src\\components\\features\\spaces\\components\\index.ts:7`\n- 優先級: P1\n- ⏰ 截止日期: 2025-01-20\n- 負責人: @frontend\n**詳細說明:**\n- 問題：70 個文件過度拆分，造成不必要的複雜性\n- 影響：導入路徑過長、維護成本高、認知負擔重\n- 建議：\n- 1) 合併功能相似的組件（如多個 list 組件）\n- 2) 簡化目錄結構，減少嵌套層級\n- 3) 移除不必要的 barrel exports\n- 4) 遵循 Next.js 15 組件組合模式\n**程式碼上下文:**\n```typescript\n * by providing a single, consistent path.\n */\n\n// TODO: [P1] REFACTOR src/components/features/spaces/components/ - 減少過度抽象的組件層級\n// 問題：70 個文件過度拆分，造成不必要的複雜性\n// 影響：導入路徑過長、維護成本高、認知負擔重\n// 建議：\n// 1) 合併功能相似的組件（如多個 list 組件）\n// 2) 簡化目錄結構，減少嵌套層級\n// 3) 移除不必要的 barrel exports\n// 4) 遵循 Next.js 15 組件組合模式\n// @assignee frontend-team\n// @deadline 2025-01-20\n```\n### 2. REFACTOR: src/components/features/spaces/components/ - 合併重複的組件邏輯\n- 檔案: `docs\\代碼參考\\src\\components\\features\\spaces\\components\\index.ts:18`\n- 優先級: P2\n- ⏰ 截止日期: 2025-01-30\n- 負責人: @frontend\n**詳細說明:**\n- 問題：多個 list/card/dialog 組件存在重複邏輯\n- 影響：代碼重複、維護困難、一致性問題\n- 建議：\n- 1) 創建通用的 List/Card/Dialog 基礎組件\n- 2) 使用 TypeScript 泛型提高類型安全\n- 3) 實現組合模式而非繼承\n- 4) 遵循 DRY 原則和奧卡姆剃刀\n- Spaces feature components exports\n**程式碼上下文:**\n```typescript\n// @assignee frontend-team\n// @deadline 2025-01-20\n\n// TODO: [P2] REFACTOR src/components/features/spaces/components/ - 合併重複的組件邏輯\n// 問題：多個 list/card/dialog 組件存在重複邏輯\n// 影響：代碼重複、維護困難、一致性問題\n// 建議：\n// 1) 創建通用的 List/Card/Dialog 基礎組件\n// 2) 使用 TypeScript 泛型提高類型安全\n// 3) 實現組合模式而非繼承\n// 4) 遵循 DRY 原則和奧卡姆剃刀\n// @assignee frontend-team\n// @deadline 2025-01-30\n```\n### 3. PERF: next.config.ts - 實現 Next.js 15 性能優化配置\n- 檔案: `docs\\代碼參考\\next.config.ts:16`\n- 優先級: P2\n- ⏰ 截止日期: 2025-02-01\n- 負責人: @performance\n**詳細說明:**\n- 問題：未充分利用 Next.js 15 的性能優化特性\n- 影響：圖片載入性能差、bundle 大小過大\n- 建議：\n- 1) 啟用 optimizePackageImports 減少 bundle 大小\n- 2) 配置 bundlePagesRouterDependencies 優化依賴打包\n- 3) 添加 experimental.turbo 配置提升開發體驗\n- 4) 配置適當的圖片優化參數\n**程式碼上下文:**\n```typescript\n    esmExternals: true,\n  },\n  \n  // TODO: [P2] PERF next.config.ts - 實現 Next.js 15 性能優化配置\n  // 問題：未充分利用 Next.js 15 的性能優化特性\n  // 影響：圖片載入性能差、bundle 大小過大\n  // 建議：\n  // 1) 啟用 optimizePackageImports 減少 bundle 大小\n  // 2) 配置 bundlePagesRouterDependencies 優化依賴打包\n  // 3) 添加 experimental.turbo 配置提升開發體驗\n  // 4) 配置適當的圖片優化參數\n  // @assignee performance-team\n  // @deadline 2025-02-01\n```\n### 4. PERF: next.config.ts - 實現 Next.js 15 性能優化配置\n- 檔案: `next.config.ts:16`\n- 優先級: P2\n- ⏰ 截止日期: 2025-02-01\n- 負責人: @performance\n**詳細說明:**\n- 問題：未充分利用 Next.js 15 的性能優化特性\n- 影響：圖片載入性能差、bundle 大小過大\n- 建議：\n- 1) 啟用 optimizePackageImports 減少 bundle 大小\n- 2) 配置 bundlePagesRouterDependencies 優化依賴打包\n- 3) 添加 experimental.turbo 配置提升開發體驗\n- 4) 配置適當的圖片優化參數\n**程式碼上下文:**\n```typescript\n    esmExternals: true,\n  },\n  \n  // TODO: [P2] PERF next.config.ts - 實現 Next.js 15 性能優化配置\n  // 問題：未充分利用 Next.js 15 的性能優化特性\n  // 影響：圖片載入性能差、bundle 大小過大\n  // 建議：\n  // 1) 啟用 optimizePackageImports 減少 bundle 大小\n  // 2) 配置 bundlePagesRouterDependencies 優化依賴打包\n  // 3) 添加 experimental.turbo 配置提升開發體驗\n  // 4) 配置適當的圖片優化參數\n  // @assignee performance-team\n  // @deadline 2025-02-01\n```\n### 5. REFACTOR: src/components/features/spaces/hooks/ - 簡化 hooks 邏輯\n- 檔案: `docs\\代碼參考\\src\\components\\features\\spaces\\hooks\\index.ts:7`\n- 優先級: P2\n- ⏰ 截止日期: 2025-02-05\n- 負責人: @frontend\n**詳細說明:**\n- 問題：多個 hooks 文件可能包含重複邏輯\n- 影響：代碼重複、狀態管理複雜\n- 建議：\n- 1) 合併相似的 hooks 邏輯\n- 2) 使用 React 19 的新 hooks 特性\n- 3) 實現更簡單的狀態管理模式\n- 4) 減少不必要的 useEffect 使用\n- Spaces feature hooks exports\n**程式碼上下文:**\n```typescript\n * hooks, such as those for handling actions, into other components.\n */\n\n// TODO: [P2] REFACTOR src/components/features/spaces/hooks/ - 簡化 hooks 邏輯\n// 問題：多個 hooks 文件可能包含重複邏輯\n// 影響：代碼重複、狀態管理複雜\n// 建議：\n// 1) 合併相似的 hooks 邏輯\n// 2) 使用 React 19 的新 hooks 特性\n// 3) 實現更簡單的狀態管理模式\n// 4) 減少不必要的 useEffect 使用\n// @assignee frontend-team\n// @deadline 2025-02-05\n```\n## 📋 建議處理順序\n依照以下順序處理 TODO：\n1. P0 - SECURITY（安全性問題）\n2. P0 - FIX（緊急修復）\n3. P1 - SECURITY\n4. P1 - FIX\n5. P1 - FEAT（重要功能）\n6. P2 項目\n7. P3 項目"
}